{
.appVersion = "3301";
.formatVersion = 3;
axes = (
{
name = Weight;
tag = wght;
}
);
customParameters = (
{
name = hheaAscender;
value = 1124;
},
{
name = hheaDescender;
value = -634;
},
{
name = hheaLineGap;
value = 0;
},
{
name = typoAscender;
value = 1124;
},
{
name = typoDescender;
value = -634;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1850;
},
{
name = winDescent;
value = 910;
},
{
name = underlinePosition;
value = -512;
},
{
name = fsType;
value = (
);
},
{
name = "Use Typo Metrics";
value = 1;
},
{
name = "Write lastChange";
value = 0;
},
{
name = "Don't use Production Names";
value = 1;
},
{
name = "Enforce Compatibility Check";
value = 0;
},
{
name = "Write DisplayStrings";
value = 0;
},
{
name = "Use Line Breaks";
value = 1;
}
);
date = "2010-05-07 21:08:01 +0000";
familyName = "Amiri Next";
featurePrefixes = (
{
code = "languagesystem DFLT dflt;
languagesystem arab dflt;
languagesystem arab ARA;
languagesystem arab URD;
languagesystem arab SND;
languagesystem arab KSH;
languagesystem arab MLY;
languagesystem latn dflt;
languagesystem latn TRK;
";
name = Languagesystems;
},
{
code = "@Digits = [zero-ar one-ar two-ar three-ar four-ar five-ar six-ar seven-ar eight-ar nine-ar zeroFarsi-ar oneFarsi-ar twoFarsi-ar threeFarsi-ar fourFarsi-ar fiveFarsi-ar sixFarsi-ar sevenFarsi-ar eightFarsi-ar nineFarsi-ar fourFarsi-ar.urd sixFarsi-ar.urd sevenFarsi-ar.urd];
@Digits.small = [zero-ar.small one-ar.small two-ar.small three-ar.small four-ar.small five-ar.small six-ar.small seven-ar.small eight-ar.small nine-ar.small zeroFarsi-ar.small oneFarsi-ar.small twoFarsi-ar.small threeFarsi-ar.small fourFarsi-ar.small fiveFarsi-ar.small sixFarsi-ar.small sevenFarsi-ar.small eightFarsi-ar.small nineFarsi-ar.small fourFarsi-ar.urd.small sixFarsi-ar.urd.small sevenFarsi-ar.urd.small];
@Digits.medium = [zero-ar.medium one-ar.medium two-ar.medium three-ar.medium four-ar.medium five-ar.medium six-ar.medium seven-ar.medium eight-ar.medium nine-ar.medium zeroFarsi-ar.medium oneFarsi-ar.medium twoFarsi-ar.medium threeFarsi-ar.medium fourFarsi-ar.medium fiveFarsi-ar.medium sixFarsi-ar.medium sevenFarsi-ar.medium eightFarsi-ar.medium nineFarsi-ar.medium fourFarsi-ar.urd.medium sixFarsi-ar.urd.medium sevenFarsi-ar.urd.medium];
@Tashkil.above = [fathasmall-ar dammasmall-ar kasrasmall-ar fathatan-ar dammatan-ar fatha-ar damma-ar shadda-ar sukun-ar dammainverted-ar noonghunnaabove-ar fathaHorizont-ar vabove-ar vinvertedabove-ar dammareversed-ar fathatwodots-ar sukunround-ar sukunoval-ar hahabove-ar meemStopabove-ar maddalong-ar noonabove-ar rhombusStopabove-ar dotStopabove-ar openfathatan-ar opendammatan-ar openfathatan-ar.small fathatan-ar.small fatha-ar.small opendammatan-ar.small damma-ar.small fatha-ar.small2 sukun-ar.small2 dammatan-ar.small];
@Tashkil.below = [kasratan-ar kasra-ar dotvowelbelow-ar rhombusStopbelow-ar meembelow-ar openkasratan-ar kasra-ar.small2];
@RaaWaw = [reh-ar.fina reh-ar waw-ar.fina waw-ar reh-ar.fina.BaaRaaIsol waw-ar.fina.LamWawFina reh-ar.fina.BaaRaaFina reh-ar.fina.KafRaaFina reh-ar.fina.KafRaaIsol reh-ar.fina.HaaRaaIsol reh-ar.fina.LamRaaIsol reh-ar.fina.PostTooth];
@aCurvedKashida = [kashida-ar.1 kashida-ar.2 kashida-ar.3 kashida-ar.4 kashida-ar.5 kashida-ar.6 kashida-ar.7];
@aKashida = [kashida-ar @aCurvedKashida];
";
name = classes;
},
{
code = "@comma = [comma-ar semicolon-ar];
@comma.alt = [commareversed reversedsemicolon];
feature locl {
    script arab;
    language URD exclude_dflt;
    sub [fourFarsi-ar sixFarsi-ar sevenFarsi-ar] by [fourFarsi-ar.urd sixFarsi-ar.urd sevenFarsi-ar.urd];
    sub dammainverted-ar by dammainverted-ar.urd;
    language KSH exclude_dflt;
    sub [fourFarsi-ar sixFarsi-ar sevenFarsi-ar] by [fourFarsi-ar.urd sixFarsi-ar.urd sevenFarsi-ar.urd];
    sub dammainverted-ar by dammainverted-ar.urd;
    language SND exclude_dflt;
    sub [sixFarsi-ar sevenFarsi-ar] by [sixFarsi-ar.urd sevenFarsi-ar.urd];
    sub dammainverted-ar by dammainverted-ar.urd;
    sub @comma by @comma.alt;
    language MLY exclude_dflt;
    sub @comma by @comma.alt;
} locl;

feature ss08 {
    featureNames {
        name 3 1 0x0409 \"Inverted Arabic comma\";
        name 3 1 0x0C01 \"فاصلة عربية مقلوبة\";
    };

    sub @comma by @comma.alt;
} ss08;
";
name = local;
},
{
code = "feature pnum {
    sub zero-ar by zero-ar.prop;
    sub one-ar by one-ar.prop;
    sub two-ar by two-ar.prop;
    sub three-ar by three-ar.prop;
    sub four-ar by four-ar.prop;
    sub five-ar by five-ar.prop;
    sub six-ar by six-ar.prop;
    sub seven-ar by seven-ar.prop;
    sub eight-ar by eight-ar.prop;
    sub nine-ar by nine-ar.prop;
    sub zeroFarsi-ar by zeroFarsi-ar.prop;
    sub oneFarsi-ar by oneFarsi-ar.prop;
    sub twoFarsi-ar by twoFarsi-ar.prop;
    sub threeFarsi-ar by threeFarsi-ar.prop;
    sub fourFarsi-ar by fourFarsi-ar.prop;
    sub fiveFarsi-ar by fiveFarsi-ar.prop;
    sub sixFarsi-ar by sixFarsi-ar.prop;
    sub sevenFarsi-ar by sevenFarsi-ar.prop;
    sub eightFarsi-ar by eightFarsi-ar.prop;
    sub nineFarsi-ar by nineFarsi-ar.prop;
    sub fourFarsi-ar.urd by fourFarsi-ar.urd.prop;
    sub sixFarsi-ar.urd by sixFarsi-ar.urd.prop;
    sub sevenFarsi-ar.urd by sevenFarsi-ar.urd.prop;
} pnum;

feature numr {
    sub zero-ar by zero-ar.numr;
    sub one-ar by one-ar.numr;
    sub two-ar by two-ar.numr;
    sub three-ar by three-ar.numr;
    sub four-ar by four-ar.numr;
    sub five-ar by five-ar.numr;
    sub six-ar by six-ar.numr;
    sub seven-ar by seven-ar.numr;
    sub eight-ar by eight-ar.numr;
    sub nine-ar by nine-ar.numr;
    sub zeroFarsi-ar by zeroFarsi-ar.numr;
    sub oneFarsi-ar by oneFarsi-ar.numr;
    sub twoFarsi-ar by twoFarsi-ar.numr;
    sub threeFarsi-ar by threeFarsi-ar.numr;
    sub fourFarsi-ar by fourFarsi-ar.numr;
    sub fiveFarsi-ar by fiveFarsi-ar.numr;
    sub sixFarsi-ar by sixFarsi-ar.numr;
    sub sevenFarsi-ar by sevenFarsi-ar.numr;
    sub eightFarsi-ar by eightFarsi-ar.numr;
    sub nineFarsi-ar by nineFarsi-ar.numr;
    sub fourFarsi-ar.urd by fourFarsi-ar.urd.numr;
    sub sixFarsi-ar.urd by sixFarsi-ar.urd.numr;
    sub sevenFarsi-ar.urd by sevenFarsi-ar.urd.numr;
} numr;

feature dnom {
    sub zero-ar by zero-ar.small;
    sub one-ar by one-ar.small;
    sub two-ar by two-ar.small;
    sub three-ar by three-ar.small;
    sub four-ar by four-ar.small;
    sub five-ar by five-ar.small;
    sub six-ar by six-ar.small;
    sub seven-ar by seven-ar.small;
    sub eight-ar by eight-ar.small;
    sub nine-ar by nine-ar.small;
    sub zeroFarsi-ar by zeroFarsi-ar.small;
    sub oneFarsi-ar by oneFarsi-ar.small;
    sub twoFarsi-ar by twoFarsi-ar.small;
    sub threeFarsi-ar by threeFarsi-ar.small;
    sub fourFarsi-ar by fourFarsi-ar.small;
    sub fiveFarsi-ar by fiveFarsi-ar.small;
    sub sixFarsi-ar by sixFarsi-ar.small;
    sub sevenFarsi-ar by sevenFarsi-ar.small;
    sub eightFarsi-ar by eightFarsi-ar.small;
    sub nineFarsi-ar by nineFarsi-ar.small;
    sub fourFarsi-ar.urd by fourFarsi-ar.urd.small;
    sub sixFarsi-ar.urd by sixFarsi-ar.urd.small;
    sub sevenFarsi-ar.urd by sevenFarsi-ar.urd.small;
} dnom;
";
name = digits;
},
{
code = "feature ccmp {
  	sub highhamzaAlef-ar by highhamza-ar alef-ar;
  	sub highhamzaWaw-ar by highhamza-ar waw-ar;
  	sub highhamzaYeh-ar by highhamza-ar yehFarsi-ar;
  	sub uHamzaabove-ar by highhamza-ar u-ar;

	# Alef family
	sub alefHamzaabove-ar by alef-ar hamzaabove-ar;
	sub alefHamzabelow-ar by alef-ar hamzabelow-ar;
	sub alefMadda-ar by alef-ar madda-ar;
	sub alefWavyhamzaabove-ar by alef-ar wavyhamzaabove-ar;
	sub alefWavyhamzabelow-ar by alef-ar wavyhamzabelow-ar;
	sub alefWasla-ar by alef-ar wasla-ar;
	sub alefTwoabove-ar by alef-ar twoabove-ar;
	sub alefThreeabove-ar by alef-ar threeabove-ar;

	# Beh family
	sub beh-ar by behDotless-ar dotbelow-ar;
	sub teh-ar by behDotless-ar twodotshorizontalabove-ar;
	sub tehVabove-ar by behDotless-ar twodotshorizontalabove-ar vabove-ar;
	sub theh-ar by behDotless-ar threedotsupabove-ar;
	sub peh-ar by behDotless-ar threedotsdownbelow-ar;
	sub pehVabove-ar by behDotless-ar vabove-ar threedotsdownbelow-ar;
	sub beeh-ar by behDotless-ar twodotsverticalbelow-ar;
	sub beheh-ar by behDotless-ar fourdotsbelow-ar;
	sub tehThreedotsdown-ar by behDotless-ar threedotsdownabove-ar;
	sub tteh-ar by behDotless-ar tahabove-ar.alt;
	sub ttehVabove-ar by behDotless-ar tahabove-ar.alt vabove-ar;
	sub tteheh-ar by behDotless-ar twodotsverticalabove-ar;
	sub teheh-ar by behDotless-ar fourdotsabove-ar;
	sub behThreedotshorizontalbelow-ar by behDotless-ar threedotshorizontalbelow-ar;
	sub behThreedotsupabove-ar by behDotless-ar threedotsupabove-ar dotbelow-ar;
	sub behThreedotsupbelow-ar by behDotless-ar threedotsupbelow-ar;
	sub tehThreedotsupbelow-ar by behDotless-ar twodotshorizontalabove-ar threedotsupbelow-ar;
	sub behTwodotsbelowDotabove-ar by behDotless-ar dotabove-ar twodotshorizontalbelow-ar;
	sub behVinvertedbelow-ar by behDotless-ar vinvertedbelow-ar;
	sub behVabove-ar by behDotless-ar vabove-ar;
	sub behVbelow-ar by behDotless-ar vbelow-ar;
	sub behhamzaabove-ar by behDotless-ar hamzaabove-ar dotbelow-ar;
	sub behMeemabove-ar by behDotless-ar dotbelow-ar meemStopabove-ar.alt;
	sub pehMeemabove-ar by behDotless-ar threedotsdownbelow-ar meemStopabove-ar.alt;
	sub tehTehabove-ar by behDotless-ar smallteh.above;
	sub tehRing-ar by behDotless-ar twodotshorizontalabove-ar ring.below;
  
	# Jeem family
	sub jeem-ar by hah-ar dotbelow-ar;
	sub khah-ar by hah-ar dotabove-ar;
	sub tcheh-ar by hah-ar threedotsdownbelow-ar;
	sub hahThreedotsabove-ar by hah-ar threedotsupabove-ar;
	sub hahHamzaabove-ar by hah-ar hamzaabove-ar;
	sub hahTwodotsverticalabove-ar by hah-ar twodotsverticalabove-ar;
	sub hahTwodotshorizontalabove-ar by hah-ar twodotshorizontalabove-ar;
	sub hahTahabove-ar by hah-ar tahabove-ar.alt;
	sub tcheheh-ar by hah-ar fourdotsbelow-ar;
	sub nyeh-ar by hah-ar twodotshorizontalbelow-ar;
	sub dyeh-ar by hah-ar twodotsverticalbelow-ar;
	sub hahThreedotsupbelow-ar by hah-ar threedotsupbelow-ar;
	sub hahTahbelow-ar by hah-ar tahbelow-ar;
	sub hahTahTwodotshorizontalabove-ar by hah-ar twodotshorizontalbelow-ar tahabove-ar.alt;
	sub hahFourbelow-ar by hah-ar fourbelow-ar;
	sub jeemTwodotsabove-ar by hah-ar dotbelow-ar twodotshorizontalabove-ar;
	sub jeemThreedotsabove-ar by hah-ar dotbelow-ar threedotsupabove-ar;
	sub tchehDotabove-ar by hah-ar threedotsdownbelow-ar dotabove-ar;
	sub tchehVabove-ar by hah-ar threedotsdownbelow-ar vabove-ar;
	sub jeemThreedotsbelow-ar by hah-ar dotbelow_threedotsdownbelow-ar;
	sub hahVinvertedbelow-ar by hah-ar vinvertedbelow-ar;

	# Dal family
	sub thal-ar by dal-ar dotabove-ar;
	sub ddal-ar by dal-ar tahabove-ar.alt;
	sub dahal-ar by dal-ar twodotshorizontalabove-ar;
	sub ddahal-ar by dal-ar twodotshorizontalbelow-ar;
	sub dul-ar by dal-ar threedotsupabove-ar;
	sub dalRing-ar by dal-ar ring.below;
	sub dalDotbelow-ar by dal-ar dotbelow-ar;
	sub dalDotbelowTah-ar by dal-ar tahabove-ar.alt dotbelow-ar;
	sub dalThreedotsdown-ar by dal-ar threedotsdownabove-ar;
	sub dalFourdots-ar by dal-ar fourdotsabove-ar;
	sub dalVinvertedabove-ar by dal-ar vinvertedabove-ar;
	sub dalTwodotsverticalbelowTah-ar by dal-ar tahabove-ar.alt twodotsverticalbelow-ar;
	sub dalVinvertedbelow-ar by dal-ar vinvertedbelow-ar;
	sub dalThreedotsbelow-ar by dal-ar threedotsdownbelow-ar;

	# Reh family
	sub zain-ar by reh-ar dotabove-ar;
	sub jeh-ar by reh-ar threedotsupabove-ar;
	sub rreh-ar by reh-ar tahabove-ar.alt;
	sub rehv-ar by reh-ar vabove-ar;
	sub rehRing-ar by reh-ar ring.below;
	sub rehDotbelow-ar by reh-ar dotbelow-ar;
	sub rehVbelow-ar by reh-ar vbelow-ar;
	sub rehDotbelowdotabove-ar by reh-ar dotabove-ar.alt dotbelow-ar;
	sub rehTwodots-ar by reh-ar twodotshorizontalabove-ar;
	sub rehFourdots-ar by reh-ar fourdotsabove-ar;
	sub rehVinvertedabove-ar by reh-ar vinvertedabove-ar;
	sub rehStroke-ar by reh-ar stroke-ar;
	sub rehTwodotsverticalabove-ar by reh-ar twodotsverticalabove-ar;
	sub rehHamzaabove-ar by reh-ar hamzaabove-ar;
	sub rehTwodotshorizontalaboveTahabove-ar by reh-ar twodotshorizontalabove-ar tahabove-ar.alt;
	sub zainVinvertedabove-ar by reh-ar dotabove-ar vinvertedabove-ar;
	sub rehNoonabove-ar by reh-ar noonabove-ar;

	# Seen family
	sub sheen-ar by seen-ar threedotsupabove-ar;
	sub seenDotbelowDotabove-ar by seen-ar dotabove-ar dotbelow-ar;
	sub sheenDotbelow-ar by seen-ar threedotsupabove-ar dotbelow-ar;
	sub sheenThreedotsbelow-ar by seen-ar threedotsupabove-ar threedotsdownbelow-ar;
	sub seenFourdotsabove-ar by seen-ar fourdotsabove-ar;
	sub seenTwodotsverticalabove-ar by seen-ar twodotsverticalabove-ar;
	sub seenTahTwodotshorizontalabove-ar by seen-ar twodotshorizontalabove-ar tahabove-ar.alt;
	sub seenFourabove-ar by seen-ar fourabove-ar;
	sub seenVinvertedabove-ar by seen-ar vinvertedabove-ar;
	sub seenThreedotsbelow-ar by seen-ar threedotsdownbelow-ar;

	# Sad family
	sub dad-ar by sad-ar dotabove-ar;
	sub dadDotbelow-ar by sad-ar dotabove-ar dotbelow-ar;
	sub sadThreedots-ar by sad-ar threedotsupabove-ar;
	sub sadTwodotsbelow-ar by sad-ar twodotshorizontalbelow-ar;
	sub sadThreedotsbelow-ar by sad-ar threedotsdownbelow-ar;

	# Tah family
	sub zah-ar by tah-ar dotabove-ar;
	sub tahThreedots-ar by tah-ar threedotsupabove-ar;
	sub tahTwodotsabove-ar by tah-ar twodotshorizontalabove-ar;
	sub tahDotbelow-ar by tah-ar dotbelow-ar;
	sub tahThreedotsbelow-ar by tah-ar threedotsdownbelow-ar;

	# Ain family
	sub ghain-ar by ain-ar dotabove-ar;
	sub ghainDotbelow-ar by ain-ar dotabove-ar dotbelow-ar;
	sub ainThreedotsbelow-ar by ain-ar threedotsdownbelow-ar;
	sub ainThreedots-ar by ain-ar threedotsupabove-ar;
	sub ainTwodotshorizontalabove-ar by ain-ar twodotshorizontalabove-ar;
	sub ainThreedotsdownabove-ar by ain-ar threedotsdownabove-ar;
	sub ainTwodotsverticalabove-ar by ain-ar twodotsverticalabove-ar;
	sub ghainThreedotsabove-ar by ain-ar dotabove_threedotsupabove-ar;

	# Qaf/Fe family
	sub feh-ar by fehDotless-ar dotabove-ar;
	sub veh-ar by fehDotless-ar threedotsupabove-ar;
	sub fehDotmovedbelow-ar by fehDotless-ar dotbelow-ar;
	sub fehDotbelow-ar by fehDotless-ar dotabove-ar dotbelow-ar;
	sub fehThreedotsbelow-ar by fehDotless-ar threedotsdownbelow-ar;
	sub peheh-ar by fehDotless-ar fourdotsabove-ar;
	sub fehTwodotsbelow-ar by fehDotless-ar twodotshorizontalbelow-ar;
	sub fehThreedotsupbelow-ar by fehDotless-ar threedotsupbelow-ar;
	sub fehDotbelowThreedotsabove-ar by fehDotless-ar threedotsupabove-ar dotbelow-ar;

	sub qaf-ar by qafDotless-ar twodotshorizontalabove-ar;
	sub qafDotabove-ar by qafDotless-ar dotabove-ar;
	sub qafThreedotsabove-ar by qafDotless-ar threedotsupabove-ar;
	sub qafDotbelow-ar by qafDotless-ar twodotshorizontalabove-ar dotbelow-ar;
	sub qafDotbelowNoDotAbove-ar by qafDotless-ar dotbelow-ar;

	# Kaf family
	sub kafThreedotsbelow-ar by kaf-ar threedotsdownbelow-ar;
	sub ng-ar by kaf-ar threedotsupabove-ar;
	sub kafDotabove-ar by kaf-ar dotabove-ar;
	sub kafTwodotshorizontalabove-ar by kaf-ar twodotshorizontalabove-ar;
	sub kafDotbelow-ar by kaf-ar dotbelow-ar;
	sub kafRing-ar by keheh-ar ring.below;
	sub gaf-ar by keheh-ar gafsarkashabove-ar;
	sub kehehDotabove-ar by keheh-ar dotabove-ar;
	sub kehehTwodotshorizontalabove-ar by keheh-ar twodotshorizontalabove-ar;
	sub kehehThreedotsabove-ar by keheh-ar threedotsupabove-ar;
	sub kehehThreedotsupbelow-ar by keheh-ar threedotsupbelow-ar;
	sub kehehThreedotsbelow-ar by keheh-ar threedotsdownbelow-ar;
	sub kehehVabove-ar by keheh-ar vabove-ar;
	sub kehehTwodotsverticalbelow-ar by keheh-ar twodotsverticalbelow-ar;
	sub gafRing-ar by gaf-ar ring.below;
	sub gafThreedots-ar by gaf-ar threedotsupabove-ar;
	sub gafTwodotsbelow-ar by gaf-ar twodotshorizontalbelow-ar;
	sub ngoeh-ar by gaf-ar twodotshorizontalabove-ar;
	sub gueh-ar by gaf-ar twodotsverticalbelow-ar;
	#sub gafInvertedstroke-ar by keheh-ar gafsarkashcenter-ar;
	#sub graf-ar by keheh-ar grafsarkashabove-ar;

	# Lam family
	sub lamDotabove-ar by lam-ar dotabove-ar;
	sub lamThreedotsabove-ar by lam-ar threedotsupabove-ar;
	sub lamThreedotsbelow-ar by lam-ar threedotsdownbelow-ar;
	sub lamVabove-ar by lam-ar vabove-ar;
	sub lamBar-ar by lam-ar stroke-ar;
	sub lamDoublebar-ar by lam-ar doublestroke-ar;
	sub lamTahabove-ar by lam-ar tahabove-ar.alt;

	# Meem family
	sub meemDotabove-ar by meem-ar dotabove-ar;
	sub meemDotbelow-ar by meem-ar dotbelow-ar;
	sub meemThreedotsabove-ar by meem-ar threedotsupabove-ar;


	# Noon family
	sub noon-ar by noonghunna-ar dotabove-ar;
	sub noonDotbelow-ar by noonghunna-ar dotabove-ar dotbelow-ar;
	sub rnoon-ar by noonghunna-ar tahabove-ar.alt;
	sub noonRing-ar by noonghunna-ar dotabove-ar ring.below;
	sub noonTwodotsbelow-ar by noonghunna-ar dotabove-ar twodotshorizontalbelow-ar;
	sub noonTahabove-ar by noonghunna-ar dotabove-ar tahabove-ar.alt;
	sub noonVabove-ar by noonghunna-ar dotabove-ar vabove-ar;
	sub noonVinvertedabove-ar by noonghunna-ar vinvertedabove-ar;

	# Yeh family
	sub yeh-ar by alefMaksura-ar twodotshorizontalbelow-ar;
	sub yehHamzaabove-ar by alefMaksura-ar hamzaabove-ar;
	sub yehKashmiri-ar by alefMaksura-ar ring.below;
	sub yehVabove-ar by yehFarsi-ar vabove-ar;
	sub yehFarsiVinverted-ar by yehFarsi-ar vinvertedabove-ar;
	sub yehFarsiTwodotsabove-ar by yehFarsi-ar twodotshorizontalabove-ar;
	sub yehFarsiThreedotsabove-ar by yehFarsi-ar threedotsupabove-ar;
	sub yehFarsiTwoabove-ar by yehFarsi-ar twoabove-ar;
	sub yehFarsiThreeabove-ar by yehFarsi-ar threeabove-ar;
	sub yehFarsiFourbelow-ar by alefMaksura-ar fourbelow-ar;
	sub e-ar by alefMaksura-ar twodotsverticalbelow-ar;
	sub yehThreedotsbelow-ar by alefMaksura-ar threedotsdownbelow-ar;
	sub yehTwodotsbelowHamzaabove-ar by alefMaksura-ar twodotshorizontalbelow-ar hamzaabove-ar;
	sub yehTwodotsbelowDotabove-ar by alefMaksura-ar twodotshorizontalbelow-ar dotabove-ar;
	sub yehTail-ar by alefMaksura-ar yeh.tail;
	sub behDotless-ar by alefMaksura-ar twodotshorizontalbelow-ar noonabove-ar;
	#sub yehthin-ar.init by behDotless-ar.init.thin twodotshorizontalbelow-ar.small;
} ccmp;

feature ccmp {
	lookupflag UseMarkFilteringSet [crown-ar];
	sub	[alef-ar lam-ar]
		 crown-ar'
	by	 crown-ar.alt;

	sub	[dal-ar]
		 crown-ar'
	by	 crown-ar.alt2;
} ccmp;

feature init {
sub behDotless-ar by behDotless-ar.init;
sub hah-ar by hah-ar.init;
sub seen-ar by seen-ar.init;
sub sad-ar by sad-ar.init;
sub tah-ar by tah-ar.init;
sub ain-ar by ain-ar.init;
sub fehDotless-ar by fehDotless-ar.init;
sub fehAfrican-ar by fehDotless-ar.init dotbelow-ar;
sub qafDotless-ar by fehDotless-ar.init;
sub qafAfrican-ar by fehDotless-ar.init dotabove-ar;
#sub qafThreedotsaboveAfrican-ar by fehDotless-ar.init dotabove_threedotsupabove-ar;
sub kaf-ar by kaf-ar.init;
sub kafswash-ar by kafswash-ar.init;
sub keheh-ar by kaf-ar.init;
sub lam-ar by lam-ar.init;
sub meem-ar by meem-ar.init;
sub noonghunna-ar by behDotless-ar.init;
sub noonThreedotsabove-ar by behDotless-ar.init threedotsdownbelow-ar;
sub noonAfrican-ar by behDotless-ar.init dotabove-ar;
sub heh-ar by heh-ar.init;
sub hehDoachashmee-ar by heh-ar.init;
sub hehgoal-ar by hehgoal-ar.init;
sub alefMaksura-ar by behDotless-ar.init;
sub yehFarsi-ar by behDotless-ar.init twodotshorizontalbelow-ar;
sub yehbarree-ar by behDotless-ar.init twodotshorizontalbelow-ar;
#sub kashida-ar by kashida-ar.init;
} init;

feature medi {
sub behDotless-ar by behDotless-ar.medi;
#sub behDotless-ar.init.thin by behDotless-ar.medi.thin;
sub hah-ar by hah-ar.medi;
sub seen-ar by seen-ar.medi;
sub sad-ar by sad-ar.medi;
sub tah-ar by tah-ar.medi;
sub ain-ar by ain-ar.medi;
sub fehDotless-ar by fehDotless-ar.medi;
sub fehAfrican-ar by fehDotless-ar.medi dotbelow-ar;
sub qafDotless-ar by fehDotless-ar.medi;
sub qafAfrican-ar by fehDotless-ar.medi dotabove-ar;
#sub qafThreedotsaboveAfrican-ar by fehDotless-ar.medi dotabove_threedotsupabove-ar;
sub kaf-ar by kaf-ar.medi;
sub kafswash-ar by kafswash-ar.medi;
sub keheh-ar by kaf-ar.medi;
sub lam-ar by lam-ar.medi;
sub meem-ar by meem-ar.medi;
sub noonghunna-ar by behDotless-ar.medi;
sub noonThreedotsabove-ar by behDotless-ar.medi threedotsdownbelow-ar;
sub noonAfrican-ar by behDotless-ar.medi dotabove-ar;
sub heh-ar by heh-ar.medi;
sub hehDoachashmee-ar by hehDoachashmee-ar.medi;
sub hehgoal-ar by hehgoal-ar.medi;
sub alefMaksura-ar by behDotless-ar.medi;
sub yehFarsi-ar by behDotless-ar.medi twodotshorizontalbelow-ar;
sub yehbarree-ar by behDotless-ar.medi twodotshorizontalbelow-ar;
} medi;

feature fina {
sub alef-ar by alef-ar.fina;
sub behDotless-ar by behDotless-ar.fina;
sub hah-ar by hah-ar.fina;
sub dal-ar by dal-ar.fina;
sub reh-ar by reh-ar.fina;
#sub rehLoop-ar by rehLoop-ar.fina;
sub seen-ar by seen-ar.fina;
sub sad-ar by sad-ar.fina;
sub tah-ar by tah-ar.fina;
sub ain-ar by ain-ar.fina;
sub fehDotless-ar by fehDotless-ar.fina;
sub fehAfrican-ar by fehDotless-ar.fina;
sub qafDotless-ar by qafDotless-ar.fina;
sub qafAfrican-ar by qafDotless-ar.fina;
#sub qafThreedotsaboveAfrican-ar by qafDotless-ar.fina threedotsupabove-ar;
sub kaf-ar by kafDotless-ar.fina miniKeheh-ar;
sub kafswash-ar by kafswash-ar.fina;
sub keheh-ar by keheh-ar.fina;
sub kirghizoe-ar by kirghizoe-ar.fina;
sub lam-ar by lam-ar.fina;
sub meem-ar by meem-ar.fina;
sub noonghunna-ar by noonghunna-ar.fina;
sub noonAfrican-ar by noonghunna-ar.fina;
sub noonThreedotsabove-ar by noonghunna-ar.fina threedotsupabove-ar;
sub heh-ar by heh-ar.fina;
sub hehDoachashmee-ar by hehDoachashmee-ar.fina;
sub hehgoal-ar by hehgoal-ar.fina;
sub ae-ar by heh-ar.fina;
sub waw-ar by waw-ar.fina;
#sub waw-ar.alt by waw-ar.fina.alt;
#sub wawStraight-ar by wawStraight-ar.fina;
sub alefMaksura-ar by alefMaksura-ar.fina;
sub yehFarsi-ar by alefMaksura-ar.fina;
sub yehbarree-ar by yehbarree-ar.fina;
#sub yehRohingya-ar by yehRohingya-ar.fina;
} fina;
";
name = basic;
},
{
code = "feature rlig {
    lookupflag IgnoreMarks;
    sub kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar by kashida-ar.7;
    sub kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar by kashida-ar.6;
    sub kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar by kashida-ar.5;
    sub kashida-ar kashida-ar kashida-ar kashida-ar by kashida-ar.4;
    sub kashida-ar kashida-ar kashida-ar by kashida-ar.3;
    sub kashida-ar kashida-ar by kashida-ar.2;
    sub kashida-ar by kashida-ar.1;
} rlig;

# If we got more kashidas than we have curved variants, break it back into
# individual glyphs and replace them by a straight variant to avoid ugly bumps.
lookup break_kashida {
    sub kashida-ar.7 by kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.6 by kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.5 by kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.4 by kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.3 by kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.2 by kashida-ar kashida-ar;
    sub kashida-ar.1 by kashida-ar;
} break_kashida;

@kashida = [kashida-ar @aCurvedKashida];
feature rlig {
    lookupflag IgnoreMarks;
    sub @kashida @aCurvedKashida' lookup break_kashida;
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    sub @aCurvedKashida' lookup break_kashida @kashida;
} rlig;

# We have a ligature for 3 kashidas followed by alef.
feature rlig {
    lookupflag IgnoreMarks;
    sub kashida-ar.3 alef-ar.fina by alef-ar.fina.Tatweel;
} rlig;

feature ss07 {
    featureNames {
        name 3 1 0x0409 \"Disable curvilinear Kashida\";
        name 3 1 0x0C01 \"تعطيل الكشيدة المقوسة\";
    };

    lookupflag IgnoreMarks;
    sub kashida-ar.7 by kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.6 by kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.5 by kashida-ar kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.4 by kashida-ar kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.3 by kashida-ar kashida-ar kashida-ar;
    sub kashida-ar.2 by kashida-ar kashida-ar;
    sub kashida-ar.1 by kashida-ar;
    sub alef-ar.fina.Tatweel by kashida-ar kashida-ar kashida-ar alef-ar.fina;
} ss07;
";
name = kashida;
},
{
code = "#
# Small letters
#
# In Quranic orthography, there are two forms of dagger alef; a superscript one
# that is a combining mark and a spacing one that is regular alef letter, the
# later is represented in Unicode by using NBSP (for isolated) or Kashida (for
# medial) before the combining mark.
#
# Other small letters have an encoded isolated form and only need medial form
# with kashida.
# Substitute combining small letters by the spacing ones.
feature ccmp {
    sub [nbspace narrownbspace] alefabove-ar by alefabove-ar.isol;
    sub kashida-ar alefabove-ar by alefabove-ar.medi;
    sub kashida-ar yehabove-ar by yehabove-ar.medi;
    sub kashida-ar highwaw-ar by highwaw-ar.medi;
    sub kashida-ar hamzaabove-ar by hamza-ar.medi;
} ccmp;

#
# Medial hamza
#
# Hamza should be shaping transparent, just like combining marks, while still
# not a combining marks, I call t medial hamza because it \"floats\" between
# adjacent letters. When a hamza comes between two letters that would normally
# join, it will be placed between them over a connecting stroke, else it will
# just set on the baseline.
#
# This is not recognized by Unicode, so we have to hack our way in the font to
# override shaping decisions by OpenType engine.
#
# Since the layout engine considers hamza non-joiner, it will break joining
# around it, so we simply override this by replacing glyphs around the hamza
# with the forms that they would normally take if it was not there, and replace
# the hamza wit its medial glyph that has a connecting stroke.
@before.isol = [behDotless-ar hah-ar seen-ar sad-ar tah-ar ain-ar kafDotless-ar lam-ar meem-ar noonghunna-ar heh-ar alefMaksura-ar];
@before.init = [behDotless-ar.init hah-ar.init seen-ar.init sad-ar.init tah-ar.init ain-ar.init kaf-ar.init lam-ar.init meem-ar.init behDotless-ar.init heh-ar.init behDotless-ar.init];
@before.medi = [behDotless-ar.medi hah-ar.medi seen-ar.medi sad-ar.medi tah-ar.medi ain-ar.medi kaf-ar.medi lam-ar.medi meem-ar.medi behDotless-ar.medi heh-ar.medi behDotless-ar.medi];
@before.fina = [behDotless-ar.fina hah-ar.fina seen-ar.fina sad-ar.fina tah-ar.fina ain-ar.fina kafDotless-ar.fina lam-ar.fina meem-ar.fina noonghunna-ar.fina heh-ar.fina alefMaksura-ar.fina];
@after.isol = [alef-ar heh-ar dal-ar reh-ar waw-ar];
@after.fina = [alef-ar.fina heh-ar.fina dal-ar.fina reh-ar.fina waw-ar.fina];
@before = [@aKashida alefabove-ar.medi yehabove-ar.medi highwaw-ar.medi @before.isol @before.fina];
@after = [@aKashida alefabove-ar.medi yehabove-ar.medi highwaw-ar.medi alef-ar.fina.Tatweel @after.isol @before.isol @before.init];
lookup Before {
    sub @before.isol by @before.init;
    sub @before.fina by @before.medi;
} Before;

lookup After {
    sub @before.isol by @before.fina;
    sub @after.isol by @after.fina;
    sub @before.init by @before.medi;
} After;

lookup MedialHamza {
    sub hamza-ar by hamza-ar.medi;
} MedialHamza;

lookup FloatingHamza {
    sub hamza-ar by hamza-ar.float;
    sub hamza-ar.medi by hamza-ar.float;
} FloatingHamza;

lookup LamAlefIsol {
    sub lam-ar by lam-ar.init.LamAlfIsol;
    sub alef-ar by alef-ar.fina.LamAlfIsol;
} LamAlefIsol;

lookup LamAlefFina {
    sub lam-ar.fina by lam-ar.medi.LamAlfFina;
    sub alef-ar by alef-ar.fina.LamAlfFina;
} LamAlefFina;

feature rlig {
    lookupflag IgnoreMarks;
    # hamza between lam and alef needs special treatment as it should not have
    # a connecting stroke to avoid breaking lam-alef.
    sub lam-ar' lookup LamAlefIsol hamza-ar' lookup FloatingHamza alef-ar' lookup LamAlefIsol;
    sub lam-ar.fina' lookup LamAlefFina hamza-ar' lookup FloatingHamza alef-ar' lookup LamAlefFina;
    # Medial hamza.
    sub @before' lookup Before hamza-ar' lookup MedialHamza @after' lookup After;
} rlig;

# This is the Unicode-sanctioned way of lam-alef with medial hamza.
feature ccmp {
    lookupflag IgnoreMarks;
    sub lam-ar hamza-ar.medi' lookup FloatingHamza alef-ar;
} ccmp;

# kern medial hamza between final lam-alef to avoid glyph overlap
feature kern {
    lookupflag IgnoreMarks;
    pos hamza-ar.float alef-ar.fina.LamAlfFina <-146 0 0 0>;
} kern;

# small waw after isolated/final heh is lower than usual, so we use an
# alternate glyph for that
feature rlig {
    lookupflag IgnoreMarks;
    sub [heh-ar heh-ar.fina] [wawSmall-ar]' by [wawSmall-ar.low];
} rlig;

# some glyphs need more room to accommodate madda mark, so we change the advance
# width on fly.
feature mark {
    # small waw
    pos [wawSmall-ar.low] [maddalong-ar] <24 0 122 0>;
    # alef
    pos [alef-ar.fina alef-ar.fina.Wide alef-ar.fina.KafMemAlf alef-ar.fina.MemAlfFina] [maddalong-ar] <122 0 122 0>;
    pos [alef-ar.fina alef-ar.fina.Wide alef-ar.fina.KafMemAlf alef-ar.fina.MemAlfFina] [madda-ar] <171 0 171 0>;
    pos [alef-ar] [maddalong-ar] <73 0 146 0>;
} mark;
";
name = quran;
},
{
code = "#
# subtending signs
#
@Pound = [pound-ar piastre-ar];
lookup digit2small {
    sub @Digits by @Digits.small;
} digit2small;

lookup digit2medi {
    sub @Digits by @Digits.medium;
} digit2medi;

lookup Sign3 {
    sub number-ar by number-ar.3;
    sub pagenumber-ar by pagenumber-ar.3;
} Sign3;

lookup Sign4 {
    sub number-ar by number-ar.4;
} Sign4;

# first we replace any sequence of digits (up to two, three or four places)
# following a subtending sign by smaller alternates
feature rlig {
    sub [endofayah-ar]                                            @Digits' lookup digit2small @Digits' lookup digit2small @Digits' lookup digit2small;
    sub [endofayah-ar footnotemarker-ar]                          @Digits' lookup digit2small @Digits' lookup digit2small;
    sub [endofayah-ar footnotemarker-ar]                          @Digits' lookup digit2small;

    sub [number-ar year-ar samvat-ar]' lookup Sign4               @Digits' lookup digit2medi  @Digits' lookup digit2medi  @Digits' lookup digit2medi @Digits' lookup digit2medi;
    sub [number-ar year-ar pagenumber-ar samvat-ar]' lookup Sign3 @Digits' lookup digit2medi  @Digits' lookup digit2medi  @Digits' lookup digit2medi;
    sub [number-ar year-ar pagenumber-ar samvat-ar]               @Digits' lookup digit2medi  @Digits' lookup digit2medi;
    sub [number-ar year-ar pagenumber-ar samvat-ar]               @Digits' lookup digit2medi;
} rlig;

# Then we contextually kern the sign with the digits so that they get enclosed by it
#
# The kerning amount is calculated this way:
# * 1st digit: (sign advance + (digit advance * number of digits)) / 2
# * Subsequent digits subtract digit advance from the position of previous digit
# * Δx is is always digit advance.
# * If part of the sign (like in number sign) needs to be excluded from the
# centering, add it to the sign advance.
# 
feature kern {
    pos endofayah-ar @Digits.small' <-1079 0 -292 0> @Digits.small' <-786 0 -292 0> @Digits.small' <-493 0 -292 0>;
    pos endofayah-ar @Digits.small' <-933 0 -292 0> @Digits.small' <-640 0 -292 0>;
    pos endofayah-ar @Digits.small' <-786 0 -292 0>;
    pos footnotemarker-ar @Digits.small' <-679 0 -292 0> @Digits.small' <-386 0 -292 0>;
    pos footnotemarker-ar @Digits.small' <-532 0 -292 0>;
    pos number-ar.4 @Digits.medium' <-1964 0 -439 0> @Digits.medium' <-1524 0 -439 0> @Digits.medium' <-1085 0 -439 0> @Digits.medium' <-646 0 -439 0>;
    pos number-ar.3 @Digits.medium' <-1524 0 -439 0> @Digits.medium' <-1085 0 -439 0> @Digits.medium' <-646 0 -439 0>;
    pos number-ar @Digits.medium' <-1109 0 -439 0> @Digits.medium' <-670 0 -439 0>;
    pos number-ar @Digits.medium' <-890 0 -439 0>;
    pos year-ar @Digits.medium' <-1770 0 -439 0> @Digits.medium' <-1331 0 -439 0> @Digits.medium' <-891 0 -439 0> @Digits.medium' <-452 0 -439 0>;
    pos year-ar @Digits.medium' <-1550 0 -439 0> @Digits.medium' <-1111 0 -439 0> @Digits.medium' <-671 0 -439 0>;
    pos year-ar @Digits.medium' <-1331 0 -439 0> @Digits.medium' <-891 0 -439 0>;
    pos year-ar @Digits.medium' <-1111 0 -439 0>;
    pos pagenumber-ar.3 @Digits.medium' <-1599 0 -439 0> @Digits.medium' <-1160 0 -439 0> @Digits.medium' <-720 0 -439 0>;
    pos pagenumber-ar @Digits.medium' <-1086 0 -439 0> @Digits.medium' <-647 0 -439 0>;
    pos pagenumber-ar @Digits.medium' <-867 0 -439 0>;
    pos samvat-ar @Digits.medium' <-2215 0 -439 0> @Digits.medium' <-1775 0 -439 0> @Digits.medium' <-1336 0 -439 0> @Digits.medium' <-896 0 -439 0>;
    pos samvat-ar @Digits.medium' <-1995 0 -439 0> @Digits.medium' <-1556 0 -439 0> @Digits.medium' <-1116 0 -439 0>;
    pos samvat-ar @Digits.medium' <-1775 0 -439 0> @Digits.medium' <-1336 0 -439 0>;
    pos samvat-ar @Digits.medium' <-1556 0 -439 0>;
    # pos @Pound @Digits' <-1995 0 -585 0> @Digits' <-1410 0 -585 0> @Digits' <-825 0 -585 0> @Digits' <-240  0 -585 0>;
    pos @Pound @Digits' <-1702 0 -585 0> @Digits' <-1117 0 -585 0> @Digits' <-532 0 -585 0>;
    pos @Pound @Digits' <-1410 0 -585 0> @Digits' <-825 0 -585 0>;
    pos @Pound @Digits' <-1117 0 -585 0>;
} kern;
";
name = enclosing;
},
{
code = "feature rtlm {
  sub radical by radical.rtlm;
} rtlm;
";
name = rtlm;
},
{
code = "# This code is kind of a big hack. We want to support a special form of name of
# Allah, but the sequence <Alef><Lam><Lam><Heh> can occur in many unrelated
# words, showing the special form for those wards is very confusing and can
# even be offending to some people.  Thus we define explicit contexts,
# including Tashkil marks that can't but be the name of Allah and ignore the
# special form for any other occurrences, but this is far from being simple.
#
# The first feature substitutes any [<Alef>]<Lam><Lam><Heh> preceded by a letter
# that is known not to be part of any of the allowed words by a regular non
# special form.  The next block will then substitute the allowed context, given
# it meets a certain criteria.
#
# The idea originated from this forum thread:
# https://web.archive.org/web/20120724090018/http://graphics4arab.com/showthread.php?t=3975
#  and I just adapted it for Amiri.
lookup HehFinaLellah {
    sub heh-ar.fina by heh-ar.fina.Lellah;
    sub hehgoal-ar.fina by heh-ar.fina.Lellah;
} HehFinaLellah;

lookup LamMediFaLellah {
    sub lam-ar.medi by lam-ar.medi.FaLellah;
} LamMediFaLellah;

lookup LamInitLellah {
    sub lam-ar.init by lam-ar.init.Lellah;
} LamInitLellah;

lookup LamMediLellah {
    sub lam-ar.medi by lam-ar.medi.Lellah;
} LamMediLellah;

# [اآٱ]
@Ai = [alef-ar alefMadda-ar alefWasla-ar];
# [ا]
@Af = [alef-ar.fina];# alefWasla-ar.fina];
@Hf = [heh-ar.fina hehgoal-ar.fina];
@xF = [fatha-ar alefabove-ar];

lookup LamLamInitX {
    sub lam-ar.init by lam-ar.init.LamLamInit;
    sub lam-ar.medi by lam-ar.medi.LamLamInit;
} LamLamInitX;

# [بت]
@Ignore = [ain-ar.fina ain-ar alef-ar alef-ar.fina behDotless-ar.fina behDotless-ar dal-ar.fina dal-ar fehDotless-ar.fina fehDotless-ar hah-ar.fina hah-ar heh-ar.fina heh-ar kafDotless-ar.fina kafDotless-ar lam-ar.fina lam-ar meem-ar.fina meem-ar noonghunna-ar.fina noonghunna-ar qafDotless-ar.fina qafDotless-ar reh-ar.fina reh-ar sad-ar.fina sad-ar seen-ar.fina seen-ar tah-ar.fina tah-ar waw-ar.fina waw-ar alefMaksura-ar.fina alefMaksura-ar];
feature rlig {
    lookupflag IgnoreMarks;
    # Allow الله/ولله/ـالله
    ignore sub [@Ai @Af waw-ar] lam-ar.init' lam-ar.medi' @Hf;
    # Supress any remaining *لله
    sub @Ignore lam-ar.init' lookup LamLamInitX lam-ar.medi' lookup LamLamInitX @Hf;
    # Allow فوالله
    ignore sub fehDotless-ar.init waw-ar.fina @Ai' lam-ar.init' lam-ar.medi' @Hf;
    # Allow والله
    ignore sub waw-ar @Ai' lam-ar.init' lam-ar.medi' @Hf;
    # Supress any remaining *الله
    sub @Ignore @Ai' lam-ar.init' lookup LamLamInitX lam-ar.medi' lookup LamLamInitX @Hf;
    # Allow فتالله/فبالله
    ignore sub fehDotless-ar.init behDotless-ar.medi @Af' lam-ar.init' lam-ar.medi' @Hf;
    # Allow تالله/بالله/كالله/فالله
    ignore sub [behDotless-ar.init kaf-ar.init fehDotless-ar.init] @Af' lam-ar.init' lam-ar.medi' @Hf;
    # Supress any remaining *ـالله
    sub @Af' lam-ar.init' lookup LamLamInitX lam-ar.medi' lookup LamLamInitX @Hf;
} rlig;

feature rlig {
    # لله
    sub lam-ar.init' lookup LamInitLellah lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    # لَلهُ
    ignore sub @Ai lam-ar.init' fatha-ar' lam-ar.medi' @Hf';
    ignore sub @Ai lam-ar.init' fatha-ar' lam-ar.medi' shadda-ar' @Hf';
    ignore sub @Ai lam-ar.init' fatha-ar' lam-ar.medi' shadda-ar' @xF' @Hf';
    sub lam-ar.init' lookup LamInitLellah fatha-ar' lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah fatha-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah fatha-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    # لِله
    ignore sub @Ai lam-ar.init' shadda-ar' lam-ar.medi' @Hf';
    ignore sub @Ai lam-ar.init' shadda-ar' lam-ar.medi' shadda-ar' @Hf';
    ignore sub @Ai lam-ar.init' shadda-ar' lam-ar.medi' shadda-ar' @xF' @Hf';
    sub lam-ar.init' lookup LamInitLellah kasra-ar' lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    # لِّله
    ignore sub @Ai lam-ar.init' shadda-ar' kasra-ar' lam-ar.medi' @Hf';
    ignore sub @Ai lam-ar.init' shadda-ar' kasra-ar' lam-ar.medi' shadda-ar' @Hf';
    ignore sub @Ai lam-ar.init' shadda-ar' kasra-ar' lam-ar.medi' shadda-ar' @xF' @Hf';
    sub lam-ar.init' lookup LamInitLellah shadda-ar' kasra-ar' lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah shadda-ar' kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub lam-ar.init' lookup LamInitLellah shadda-ar' kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    # فلله
    sub fehDotless-ar' lam-ar.medi' lookup LamMediFaLellah lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' lam-ar.medi' lookup LamMediFaLellah lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' lam-ar.medi' lookup LamMediFaLellah lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' fatha-ar' lam-ar.medi' lookup LamMediFaLellah lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' fatha-ar' lam-ar.medi' lookup LamMediFaLellah lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' fatha-ar' lam-ar.medi' lookup LamMediFaLellah lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' lam-ar.medi' lookup LamMediFaLellah kasra-ar' lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' lam-ar.medi' lookup LamMediFaLellah kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' lam-ar.medi' lookup LamMediFaLellah kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' fatha-ar' lam-ar.medi' lookup LamMediFaLellah kasra-ar' lam-ar.medi' lookup LamMediLellah @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' fatha-ar' lam-ar.medi' lookup LamMediFaLellah kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @Hf' lookup HehFinaLellah;
    sub fehDotless-ar' fatha-ar' lam-ar.medi' lookup LamMediFaLellah kasra-ar' lam-ar.medi' lookup LamMediLellah shadda-ar' @xF' @Hf' lookup HehFinaLellah;
} rlig;

# Now put shadda+dagger alef above the medial lam if there are no marks on it.
feature rlig {
    sub lam-ar.medi.Lellah' heh-ar.fina.Lellah by lam-ar.medi.Lellah2;
} rlig;

# This stylistic set removes them.
feature ss06 {
    featureNames {
        name 3 1 0x0409 \"No automatic vowel insertion above name of God\";
        name 3 1 0x0C01 \"لفظ الجلالة بدون شدة وألف صغيرة\";
    };

    sub lam-ar.medi.Lellah2' by lam-ar.medi.Lellah;
} ss06;
";
name = lellah;
},
{
code = "# replace tashkil following shadda by smaller alternates
@ShaddaTashkil = [fatha-ar fathatan-ar dammatan-ar damma-ar openfathatan-ar opendammatan-ar dammainverted-ar];
@ShaddaTashkil.small = [fatha-ar.small fathatan-ar.small dammatan-ar.small damma-ar.small openfathatan-ar.small opendammatan-ar.small dammainverted-ar.small];
lookup SamallTashkil {
    sub @ShaddaTashkil by @ShaddaTashkil.small;
} SamallTashkil;

feature rlig {
    sub [shadda-ar dotStopabove-ar] @ShaddaTashkil' lookup SamallTashkil;
    sub @ShaddaTashkil.small @ShaddaTashkil' lookup SamallTashkil;
    sub @ShaddaTashkil' lookup SamallTashkil @ShaddaTashkil' lookup SamallTashkil;
} rlig;

# replace tashkil following hamza by smaller alternates
feature rlig {
    sub [hamzaabove-ar] [fatha-ar fatha-ar.small damma-ar sukun-ar]' by [fatha-ar.small2 fatha-ar.small2 damma-ar.small sukun-ar.small2];
    sub [hamzabelow-ar dotvowelbelow-ar] [kasra-ar]' by [kasra-ar.small2];
} rlig;

lookup BaaInitWide {
    sub behDotless-ar.init by behDotless-ar.init.Wide;
} BaaInitWide;

feature rlig {
    sub behDotless-ar.init' lookup BaaInitWide @Tashkil.above' [keheh-ar.medi keheh-ar.fina]';
    sub behDotless-ar.init' lookup BaaInitWide @Tashkil.above' @Tashkil.above' [keheh-ar.medi keheh-ar.fina]';
    sub behDotless-ar.init' lookup BaaInitWide @Tashkil.above' @Tashkil.above' @Tashkil.above' [keheh-ar.medi keheh-ar.fina]';
} rlig;

lookup AboveHaaInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaHaaInit;
    sub hah-ar.medi by hah-ar.medi.SadHaaInit;
    sub heh-ar.init by heh-ar.init.HehHaaInit;
    sub meem-ar.init by meem-ar.init.MemHaaInit;
    sub sad-ar.init by sad-ar.init.SadHaaInit;
    sub seen-ar.init by seen-ar.init.SenHaaInit;
} AboveHaaInit;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.init heh-ar.init meem-ar.init sad-ar.init seen-ar.init]' lookup AboveHaaInit [hah-ar.medi]' lookup AboveHaaInit;
} rlig;

lookup BaaRaaFina {
    sub behDotless-ar.medi by behDotless-ar.medi.BaaRaaFina;
    sub reh-ar.fina by reh-ar.fina.BaaRaaFina;
} BaaRaaFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.medi]' lookup BaaRaaFina [reh-ar.fina]' lookup BaaRaaFina;
} rlig;

lookup BaaNonFina {
    sub behDotless-ar.medi by behDotless-ar.medi.BaaNonFina;
    sub noonghunna-ar.fina by noonghunna-ar.fina.BaaNonFina;
} BaaNonFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.medi]' lookup BaaNonFina [noonghunna-ar.fina]' lookup BaaNonFina;
} rlig;

lookup BaaMemFina {
    sub behDotless-ar.medi by behDotless-ar.medi.BaaMemFina;
    sub meem-ar.fina by meem-ar.fina.BaaMemFina;
} BaaMemFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.medi]' lookup BaaMemFina [meem-ar.fina]' lookup BaaMemFina;
} rlig;

lookup KafBaaAlfIsol {
    sub behDotless-ar.medi by behDotless-ar.medi.KafBaaInit;
    sub kaf-ar.init by kaf-ar.init.KafBaaInit;
} KafBaaAlfIsol;

lookup KafBaaAlfFina {
    sub behDotless-ar.medi by behDotless-ar.medi.KafBaaMedi;
    sub kaf-ar.medi by kaf-ar.medi.KafBaaMedi;
} KafBaaAlfFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [kaf-ar.init]' lookup KafBaaAlfIsol [behDotless-ar.medi]' lookup KafBaaAlfIsol [alef-ar.fina lam-ar.medi lam-ar.fina];
    sub [kaf-ar.medi]' lookup KafBaaAlfFina [behDotless-ar.medi]' lookup KafBaaAlfFina [alef-ar.fina lam-ar.medi lam-ar.fina];
} rlig;

lookup BaaBaa {
    sub behDotless-ar.medi by behDotless-ar.medi.BaaBaaInit;
    sub behDotless-ar.fina by behDotless-ar.fina.BaaBaaIsol;
    sub behDotless-ar.init by behDotless-ar.init.BaaBaaIsol;
} BaaBaa;

lookup HighBaa {
    sub behDotless-ar.init by behDotless-ar.init.High;
    sub behDotless-ar.medi by behDotless-ar.medi.High;
} HighBaa;

feature rlig {
    lookupflag IgnoreMarks;
    # hack to prevent double high baa in سببس and likes
    sub [seen-ar.init seen-ar.medi]' [behDotless-ar.medi]' [behDotless-ar.medi]' lookup HighBaa [seen-ar.medi seen-ar.fina]';
    # جرينتش
    sub [behDotless-ar.init]' lookup BaaBaa [behDotless-ar.medi]' lookup BaaBaa [behDotless-ar.medi]' lookup HighBaa [seen-ar.fina seen-ar.medi seen-ar.medi.PreYaa];
    sub [behDotless-ar.medi sad-ar.init sad-ar.medi seen-ar.init seen-ar.medi behDotless-ar.medi.BaaBaaInit] [behDotless-ar.medi]' lookup HighBaa [behDotless-ar.fina behDotless-ar.medi seen-ar.fina behDotless-ar.medi.BaaHehMedi seen-ar.medi seen-ar.medi.PreYaa];
    sub [behDotless-ar.medi]' lookup HighBaa [seen-ar.fina seen-ar.medi seen-ar.medi.PreYaa];
    sub [behDotless-ar.init]' lookup HighBaa [behDotless-ar.medi]' lookup HighBaa [behDotless-ar.medi behDotless-ar.fina seen-ar.medi seen-ar.fina];
} rlig;

lookup BaaHeh {
    sub behDotless-ar.init by behDotless-ar.init.BaaHehInit;
    #sub meem-ar.init.dots by meem-ar.init.MemHehInit;
    sub behDotless-ar.medi by behDotless-ar.medi.BaaHehMedi;
    sub heh-ar.medi by heh-ar.medi.BaaHehMedi;
} BaaHeh;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.init behDotless-ar.medi]' lookup BaaHeh [heh-ar.medi]' lookup BaaHeh;
} rlig;

lookup BaaBaaHeh {
    sub behDotless-ar.init by behDotless-ar.init.BaaBaaHeh;
} BaaBaaHeh;

feature rlig {
    lookupflag IgnoreMarks;
    sub behDotless-ar.init' lookup BaaBaaHeh behDotless-ar.medi.BaaHehMedi;
} rlig;

lookup LamAlfFina {
    sub alef-ar.fina by alef-ar.fina.LamAlfFina;
    sub lam-ar.medi by lam-ar.medi.LamAlfFina;
} LamAlfFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [lam-ar.medi]' lookup LamAlfFina [alef-ar.fina]' lookup LamAlfFina;
    sub [lam-ar.medi]' lookup LamAlfFina hamza-ar.float' [alef-ar.fina]' lookup LamAlfFina;
} rlig;

lookup KafLamHeh {
    sub lam-ar.medi by lam-ar.medi.KafLamHehIsol;
} KafLamHeh;

lookup BaaSenAltInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaSenAltInit;
    sub reh-ar.fina by reh-ar.fina.PostTooth;
    sub seen-ar.medi by seen-ar.medi.BaaSenAltInit;
    sub heh-ar.medi by heh-ar.medi.PostTooth;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.PostTooth;
    sub meem-ar.fina by meem-ar.fina.PostTooth;
} BaaSenAltInit;

lookup LamHaaHaaInit {
    sub hah-ar.medi by hah-ar.medi.1LamHaaHaaInit;
    sub lam-ar.init by lam-ar.init.LamHaaHaaInit;
} LamHaaHaaInit;

lookup LamHaaHaaInit2 {
    sub hah-ar.medi by hah-ar.medi.2LamHaaHaaInit;
} LamHaaHaaInit2;

lookup KafHeh {
    sub kaf-ar.init by kaf-ar.init.KafHeh;
    sub kaf-ar.medi by kaf-ar.medi.KafHeh;
    sub heh-ar.fina by heh-ar.fina.KafHeh;
    sub dal-ar.fina by dal-ar.fina.KafDal;
} KafHeh;

lookup LamMemFina {
    sub lam-ar.medi by lam-ar.medi.LamMemFina;
    sub meem-ar.fina by meem-ar.fina.LamMemFina;
} LamMemFina;

lookup SenMemInit {
    sub seen-ar.init by seen-ar.init.SenMemInit;
    sub sad-ar.init by sad-ar.init.SadMemInit;
    sub meem-ar.init by meem-ar.init.MemMemInit;
    sub meem-ar.medi by meem-ar.medi.SenMemInit;
} SenMemInit;

lookup AllYaaIsol {
    sub kaf-ar.init by kaf-ar.init.KafYaaIsol;
    sub behDotless-ar.init by behDotless-ar.init.BaaYaaIsol;
    sub fehDotless-ar.init by fehDotless-ar.init.FaaYaaIsol;
    sub lam-ar.init by lam-ar.init.LamYaaIsol;
    sub ain-ar.init by ain-ar.init.AynYaaIsol;
    sub hah-ar.init by hah-ar.init.HaaYaaIsol;
    sub heh-ar.init by heh-ar.init.HehYaaIsol;
    #sub meem-ar.init.dots by meem-ar.init.MemYaaIsol;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.KafYaaIsol;
} AllYaaIsol;

lookup BaaRaaIsol {
    sub behDotless-ar.init by behDotless-ar.init.BaaRaaIsol;
    sub reh-ar.fina by reh-ar.fina.BaaRaaIsol;
} BaaRaaIsol;

lookup LamHehIsol {
    sub lam-ar.init by lam-ar.init.LamHeh;
    sub lam-ar.medi by lam-ar.medi.LamHeh;
    sub lam-ar.medi.LamLamInit by lam-ar.medi.LamLamHehIsol;
    sub heh-ar.fina by heh-ar.fina.LamHeh;
    sub dal-ar.fina by dal-ar.fina.LamDal;
} LamHehIsol;

lookup LamWawFina {
    sub lam-ar.medi by lam-ar.medi.LamWawFina;
    sub waw-ar.fina by waw-ar.fina.LamWawFina;
} LamWawFina;

lookup FaaYaaFina {
    sub fehDotless-ar.medi by fehDotless-ar.medi.FaaYaaFina;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.FaaYaaFina;
} FaaYaaFina;

lookup LamLamHaaInit {
    sub hah-ar.medi by hah-ar.medi.LamLamHaaInit;
    sub lam-ar.init by lam-ar.init.LamLamHaaInit;
    sub lam-ar.medi by lam-ar.medi.LamLamHaaInit;
} LamLamHaaInit;

lookup LamBaaMemInit {
    sub behDotless-ar.medi by behDotless-ar.medi.LamBaaMemInit;
    sub lam-ar.init by lam-ar.init.LamBaaMemInit;
    sub meem-ar.medi by meem-ar.medi.LamBaaMemInit;
} LamBaaMemInit;

lookup KafLamMemMedi {
    sub lam-ar.medi by lam-ar.medi.KafLamMemMedi;
} KafLamMemMedi;

lookup KafLamMemFina {
    sub lam-ar.medi by lam-ar.medi.KafLamMemFina;
    sub lam-ar.medi.LamMemFina by lam-ar.medi.KafLamMemFina;
} KafLamMemFina;

lookup BaaDalIsol {
    sub behDotless-ar.init by behDotless-ar.init.BaaDal;
    sub dal-ar.fina by dal-ar.fina.BaaDal;
} BaaDalIsol;

lookup BaaMemHaaInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaMemHaaInit;
    sub hah-ar.medi by hah-ar.medi.BaaMemHaaInit;
    sub meem-ar.medi by meem-ar.medi.BaaMemHaaInit;
} BaaMemHaaInit;

lookup BaaBaaYaa {
    sub behDotless-ar.init by behDotless-ar.init.BaaBaaYaa;
    sub behDotless-ar.medi by behDotless-ar.medi.BaaBaaYaa;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.BaaBaaYaa;
} BaaBaaYaa;

@LamLamFoo = [lam-ar.medi.LamMemMedi lam-ar.medi.LamHeh lam-ar.medi.LamYaaFina];
lookup LamLamInit {
    sub lam-ar.init by lam-ar.init.LamLamInit;
    sub lam-ar.medi by lam-ar.medi.LamLamInit;
    sub lam-ar.fina by lam-ar.fina.LamLamIsol;
    sub kafDotless-ar.fina by kafDotless-ar.fina.LamKafIsol;
    sub keheh-ar.alt.fina by keheh-ar.fina.LamKafIsol;
    sub lam-ar.medi.LamAlfFina by lam-ar.medi.LamLamAlfIsol;
    sub @LamLamFoo by [lam-ar.medi.LamLamMemInit lam-ar.medi.LamLamHehIsol lam-ar.medi.LamLamYaaIsol];
} LamLamInit;

lookup LamLamMedi {
    sub lam-ar.medi by lam-ar.medi.LamLamMedi2;
    sub lam-ar.fina by lam-ar.fina.LamLamFina;
    sub kafDotless-ar.fina by kafDotless-ar.fina.LamKafFina;
    sub keheh-ar.alt.fina by keheh-ar.fina.LamKafFina;
    sub lam-ar.medi.LamAlfFina by lam-ar.medi.LamLamAlefFina;
    sub @LamLamFoo by [lam-ar.medi.LamLamMemMedi lam-ar.medi.LamLamHehFina lam-ar.medi.LamLamYaaFina];
} LamLamMedi;

lookup LamLamMedi2 {
    sub lam-ar.medi by lam-ar.medi.LamLamMedi;
} LamLamMedi2;

lookup LamYaaFina {
    sub lam-ar.medi by lam-ar.medi.LamYaaFina;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.LamYaaFina;
} LamYaaFina;

lookup LamMemHaaInit {
    sub hah-ar.medi by hah-ar.medi.LamMemHaaInit;
    sub lam-ar.init by lam-ar.init.LamMemHaaInit;
    sub meem-ar.medi by meem-ar.medi.LamMemHaaInit;
} LamMemHaaInit;

lookup LamMemInit {
    sub lam-ar.init by lam-ar.init.LamMemInit;
    sub meem-ar.medi by meem-ar.medi.LamMemInit;
} LamMemInit;

lookup LamAlfIsol {
    sub alef-ar.fina by alef-ar.fina.LamAlfIsol;
    sub lam-ar.init by lam-ar.init.LamAlfIsol;
} LamAlfIsol;

lookup LamHaaMemInit {
    sub hah-ar.medi by hah-ar.medi.LamHaaMemInit;
    sub lam-ar.init by lam-ar.init.LamHaaMemInit;
    sub meem-ar.medi by meem-ar.medi.LamHaaMemInit;
} LamHaaMemInit;

lookup BaaBaaMemInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaBaaMemInit;
    sub behDotless-ar.medi by behDotless-ar.medi.BaaBaaMemInit;
    sub meem-ar.medi by meem-ar.medi.BaaBaaMemInit;
} BaaBaaMemInit;

lookup BaaBaaHaaInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaBaaHaaInit;
    sub behDotless-ar.medi by behDotless-ar.medi.BaaBaaHaaInit;
    sub hah-ar.medi by hah-ar.medi.BaaBaaHaaInit;
} BaaBaaHaaInit;

lookup MemRaaIsol {
    sub meem-ar.init by meem-ar.init.MemRaaIsol;
    sub reh-ar.fina by reh-ar.fina.MemRaaIsol;
} MemRaaIsol;

lookup HaaHaaInit {
    sub hah-ar.init by hah-ar.init.HaaHaaInit;
    sub hah-ar.medi by hah-ar.medi.HaaHaaInit;
} HaaHaaInit;

lookup KafMemIsol {
    sub kaf-ar.init by kaf-ar.init.KafMemIsol;
    sub lam-ar.init by lam-ar.init.LamMemIsol;
    sub behDotless-ar.init by behDotless-ar.init.BaaMemIsol;
    sub meem-ar.fina by meem-ar.fina.KafMemIsol;
} KafMemIsol;

lookup LamQafFina {
    sub lam-ar.medi by lam-ar.medi.LamQafFina;
    sub qafDotless-ar.fina by qafDotless-ar.fina.LamQafFina;
} LamQafFina;

lookup MemHaaMemInit {
    sub hah-ar.medi by hah-ar.medi.MemHaaMemInit;
    sub meem-ar.init by meem-ar.init.MemHaaMemInit;
    sub meem-ar.init.MemHaaInit by meem-ar.init.MemHaaMemInit;
    sub hah-ar.medi.SadHaaInit by hah-ar.medi.MemHaaMemInit;
} MemHaaMemInit;

lookup BaaNonIsol {
    sub behDotless-ar.init by behDotless-ar.init.BaaNonIsol;
    sub noonghunna-ar.fina by noonghunna-ar.fina.BaaNonIsol;
} BaaNonIsol;

lookup KafMemFina {
    sub kaf-ar.medi by kaf-ar.medi.KafMemFina;
    sub meem-ar.fina by meem-ar.fina.KafMemFina;
} KafMemFina;

lookup KafLamAlf {
    sub lam-ar.medi by lam-ar.medi.KafLamAlf;
    sub lam-ar.medi.LamAlfFina by lam-ar.medi.KafLamAlf;
} KafLamAlf;

lookup BaaSenInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaSenInit;
    sub seen-ar.fina by seen-ar.fina.BaaSen;
    sub seen-ar.medi by seen-ar.medi.BaaSenInit;
} BaaSenInit;

lookup KafRaaFina {
    sub kaf-ar.medi by kaf-ar.medi.KafRaaFina;
    sub reh-ar.fina by reh-ar.fina.KafRaaFina;
} KafRaaFina;

lookup LamHehInit {
    sub heh-ar.medi by heh-ar.medi.LamHehInit;
    sub lam-ar.init by lam-ar.init.LamHehInit;
} LamHehInit;

lookup BaaMemInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaMemInit;
    sub meem-ar.medi by meem-ar.medi.BaaMemInit;
} BaaMemInit;

lookup KafLam {
    sub kaf-ar.init by kaf-ar.init.KafLam;
    sub kaf-ar.medi by kaf-ar.medi.KafLam;
    sub kafDotless-ar.fina by kafDotless-ar.fina.KafKafFina;
    sub keheh-ar.alt.fina by keheh-ar.fina.KafKafFina;
    sub lam-ar.medi by lam-ar.medi.KafLam;
    sub lam-ar.fina by lam-ar.fina.KafLam;
    sub alef-ar.fina by alef-ar.fina.KafAlf;
} KafLam;

lookup KafRaaIsol {
    sub kaf-ar.init by kaf-ar.init.KafRaaIsol;
    sub reh-ar.fina by reh-ar.fina.KafRaaIsol;
} KafRaaIsol;

lookup AynHaaInit {
    sub ain-ar.init by ain-ar.init.AynHaaInit;
    sub hah-ar.medi by hah-ar.medi.AynHaaInit;
} AynHaaInit;

lookup KafYaaFina {
    sub kaf-ar.medi by kaf-ar.medi.KafYaaFina;
    sub ain-ar.medi by ain-ar.medi.AynYaaFina;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.KafYaaFina;
} KafYaaFina;

lookup LamMemMedi {
    sub lam-ar.medi by lam-ar.medi.LamMemMedi;
    #sub meem-ar.medi.dots by meem-ar.medi.LamMemMedi;
} LamMemMedi;

lookup SenBaaMemInit {
    sub seen-ar.init by seen-ar.init.SenBaaMemInit;
    sub sad-ar.init by sad-ar.init.SenBaaMemInit;
    sub behDotless-ar.medi by behDotless-ar.medi.SenBaaMemInit;
    sub meem-ar.medi by meem-ar.medi.SenBaaMemInit;
} SenBaaMemInit;

lookup HaaRaaIsol {
    sub hah-ar.init by hah-ar.init.HaaRaaIsol;
    sub reh-ar.fina by reh-ar.fina.HaaRaaIsol;
} HaaRaaIsol;

lookup LamRaaIsol {
    sub lam-ar.init by lam-ar.init.LamRaaIsol;
    sub reh-ar.fina by reh-ar.fina.LamRaaIsol;
} LamRaaIsol;

lookup KafMemAlf {
    sub kaf-ar.medi by kaf-ar.medi.KafMemAlf;
    sub kaf-ar.init by kaf-ar.init.KafMemAlf;
    sub meem-ar.medi by meem-ar.medi.KafMemAlf;
    sub alef-ar.fina by alef-ar.fina.KafMemAlf;
    sub lam-ar.fina by lam-ar.fina.KafMemLam;
    sub lam-ar.medi by lam-ar.medi.KafMemLam;
} KafMemAlf;

lookup BaaHaaMemInit {
    sub behDotless-ar.init by behDotless-ar.init.BaaHaaMemInit;
    sub hah-ar.medi by hah-ar.medi.BaaHaaMemInit;
    sub hah-ar.medi.SadHaaInit by hah-ar.medi.BaaHaaMemInit;
    sub behDotless-ar.init.BaaHaaInit by behDotless-ar.init.BaaHaaMemInit;
} BaaHaaMemInit;

lookup AboveHaaIsol {
    sub ain-ar.init by ain-ar.init.AboveHaa;
    sub behDotless-ar.init by behDotless-ar.init.AboveHaa;
    sub fehDotless-ar.init by fehDotless-ar.init.FaaHaaInit;
    sub hah-ar.init by hah-ar.init.AboveHaa;
    sub heh-ar.init by heh-ar.init.AboveHaa;
    sub kaf-ar.init by kaf-ar.init.AboveHaa;
    sub lam-ar.init by lam-ar.init.LamHaaInit;
    sub meem-ar.init by meem-ar.init.AboveHaa;
    sub sad-ar.init by sad-ar.init.AboveHaa;
    sub seen-ar.init by seen-ar.init.AboveHaa;
    sub hah-ar.fina by hah-ar.fina.AboveHaaIsol;
} AboveHaaIsol;

lookup AboveHaaIsol2 {
    sub hah-ar.fina by hah-ar.fina.AboveHaaIsol2;
    sub hah-ar.medi by hah-ar.medi.FaaHaaInit;
} AboveHaaIsol2;

lookup SenYaaFina {
    sub reh-ar.fina by reh-ar.fina.PostTooth;
    sub sad-ar.init by sad-ar.init.PreYaa;
    sub sad-ar.medi by sad-ar.medi.PreYaa;
    sub seen-ar.init by seen-ar.init.PreYaa;
    sub seen-ar.medi by seen-ar.medi.PreYaa;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.PostTooth;
} SenYaaFina;

lookup KafMemInit {
    sub kaf-ar.init by kaf-ar.init.KafMemInit;
    sub kaf-ar.medi by kaf-ar.medi.KafMemMedi;
    sub ain-ar.init by ain-ar.init.AynMemInit;
    sub fehDotless-ar.init by fehDotless-ar.init.FaaMemInit;
    sub hah-ar.init by hah-ar.init.HaaMemInit;
    sub heh-ar.init by heh-ar.init.HehMemInit;
    sub meem-ar.medi by meem-ar.medi.KafMemMedi;
} KafMemInit;

# the Lam.medi+Mem.fina is too narrow for tashkil, so we use a wider (extended)
# meem when tashkil clash is anticipated.
lookup LamMemFinaExtended {
    sub meem-ar.fina by meem-ar.fina.LamMemFinaExtended;
} LamMemFinaExtended;

feature rlig {
    sub lam-ar.medi' lookup LamMemFina @Tashkil.above' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.above';
    sub lam-ar.medi' lookup LamMemFina @Tashkil.above' @Tashkil.above' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.above';
    sub lam-ar.medi' lookup LamMemFina @Tashkil.above' @Tashkil.above' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.above' @Tashkil.above';
    sub lam-ar.medi' lookup LamMemFina @Tashkil.above' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.above' @Tashkil.above';
    sub lam-ar.medi' lookup LamMemFina @Tashkil.below' @Tashkil.above' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.above';
    sub lam-ar.medi' lookup LamMemFina @Tashkil.above' @Tashkil.below' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.above';
    sub lam-ar.medi' lookup LamMemFina @Tashkil.below' meem-ar.fina' lookup LamMemFinaExtended @Tashkil.below';
} rlig;

# ditto
lookup MemExtended {
    sub meem-ar.fina by meem-ar.fina.KafMemIsolExtended;
} MemExtended;

feature rlig {
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.above' meem-ar.fina' lookup MemExtended @Tashkil.above';
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.above' @Tashkil.above' meem-ar.fina' lookup MemExtended @Tashkil.above';
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.above' @Tashkil.above' meem-ar.fina' lookup MemExtended @Tashkil.above' @Tashkil.above';
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.above' meem-ar.fina' lookup MemExtended @Tashkil.above' @Tashkil.above';
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.below' @Tashkil.above' meem-ar.fina' lookup MemExtended @Tashkil.above';
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.above' @Tashkil.below' meem-ar.fina' lookup MemExtended @Tashkil.above';
    sub [lam-ar.init kaf-ar.init]' lookup KafMemIsol @Tashkil.below' meem-ar.fina' lookup MemExtended @Tashkil.below';
} rlig;

# ditto
lookup LamMemInitTatweel {
    sub meem-ar.medi by meem-ar.medi.LamMemInitTatweel;
} LamMemInitTatweel;

feature rlig {
    sub lam-ar.init' lookup LamMemInit @Tashkil.above' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.above';
    sub lam-ar.init' lookup LamMemInit @Tashkil.above' @Tashkil.above' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.above';
    sub lam-ar.init' lookup LamMemInit @Tashkil.above' @Tashkil.above' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.above' @Tashkil.above';
    sub lam-ar.init' lookup LamMemInit @Tashkil.above' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.above' @Tashkil.above';
    sub lam-ar.init' lookup LamMemInit @Tashkil.below' @Tashkil.above' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.above';
    sub lam-ar.init' lookup LamMemInit @Tashkil.above' @Tashkil.below' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.above';
    sub lam-ar.init' lookup LamMemInit @Tashkil.below' meem-ar.medi' lookup LamMemInitTatweel @Tashkil.below';
} rlig;

# ditto
lookup KafMemFinaExtended {
    sub meem-ar.fina by meem-ar.fina.KafMemFinaExtended;
} KafMemFinaExtended;

feature rlig {
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.above' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.above';
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.above' @Tashkil.above' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.above';
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.above' @Tashkil.above' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.above' @Tashkil.above';
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.above' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.above' @Tashkil.above';
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.below' @Tashkil.above' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.above;
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.above' @Tashkil.below' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.above';
    sub kaf-ar.medi' lookup KafMemFina @Tashkil.below' meem-ar.fina' lookup KafMemFinaExtended @Tashkil.below';
} rlig;

# No IgnoreMarks here, to narrow to carry vowels
feature rlig {
    sub [behDotless-ar.init]' lookup BaaMemHaaInit [meem-ar.medi]' lookup BaaMemHaaInit [hah-ar.medi]' lookup BaaMemHaaInit;
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafLam [lam-ar.medi]' lookup KafLamHeh [heh-ar.fina dal-ar.fina]' lookup LamHehIsol;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafMemAlf [meem-ar.medi]' lookup KafMemAlf [lam-ar.medi lam-ar.fina alef-ar.fina]' lookup KafMemAlf;
    sub [behDotless-ar.init]' lookup BaaSenAltInit [seen-ar.medi]' lookup BaaSenAltInit [heh-ar.medi reh-ar.fina alefMaksura-ar.fina meem-ar.fina]' lookup BaaSenAltInit;
    sub [lam-ar.init]' lookup LamHaaHaaInit [hah-ar.medi]' lookup LamHaaHaaInit [hah-ar.medi]' lookup LamHaaHaaInit2;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafHeh [heh-ar.fina dal-ar.fina]' lookup KafHeh;
    sub [lam-ar.medi]' lookup LamMemFina [meem-ar.fina]' lookup LamMemFina;
    sub [seen-ar.init sad-ar.init meem-ar.init]' lookup SenMemInit [meem-ar.medi]' lookup SenMemInit;
    sub [kaf-ar.init behDotless-ar.init fehDotless-ar.init lam-ar.init ain-ar.init hah-ar.init heh-ar.init]' lookup AllYaaIsol [alefMaksura-ar.fina]' lookup AllYaaIsol;
    sub [behDotless-ar.init]' lookup BaaRaaIsol [reh-ar.fina]' lookup BaaRaaIsol;
    sub [lam-ar.init lam-ar.medi lam-ar.medi.LamLamInit]' lookup LamHehIsol [heh-ar.fina dal-ar.fina]' lookup LamHehIsol;
    sub [lam-ar.medi]' lookup LamWawFina [waw-ar.fina]' lookup LamWawFina;
    sub [fehDotless-ar.medi]' lookup FaaYaaFina [alefMaksura-ar.fina]' lookup FaaYaaFina;
    sub [lam-ar.init]' lookup LamLamHaaInit [lam-ar.medi]' lookup LamLamHaaInit [hah-ar.medi]' lookup LamLamHaaInit;
    sub [lam-ar.init]' lookup LamBaaMemInit [behDotless-ar.medi]' lookup LamBaaMemInit [meem-ar.medi]' lookup LamBaaMemInit;
    #sub [kaf-ar.init kaf-ar.medi]' lookup KafLam [lam-ar.medi]' lookup KafLamMemMedi [meem-ar.medi.dots]' lookup LamMemMedi;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafLam [lam-ar.medi lam-ar.medi.LamMemFina]' lookup KafLamMemFina [meem-ar.fina meem-ar.fina.LamMemFinaExtended]' lookup LamMemFina;
    sub [behDotless-ar.init]' lookup BaaDalIsol [dal-ar.fina]' lookup BaaDalIsol;
    sub [behDotless-ar.init]' lookup BaaBaaYaa [behDotless-ar.medi]' lookup BaaBaaYaa [alefMaksura-ar.fina]' lookup BaaBaaYaa;
    sub [lam-ar.medi]' lookup LamYaaFina [alefMaksura-ar.fina]' lookup LamYaaFina;
    sub [lam-ar.init]' lookup LamMemHaaInit [meem-ar.medi]' lookup LamMemHaaInit [hah-ar.medi]' lookup LamMemHaaInit;
    sub [lam-ar.init]' lookup LamMemInit [meem-ar.medi]' lookup LamMemInit;
    sub [lam-ar.init]' lookup LamAlfIsol [alef-ar.fina]' lookup LamAlfIsol;
    sub [lam-ar.init]' lookup LamAlfIsol hamza-ar.float' [alef-ar.fina]' lookup LamAlfIsol;
    sub [lam-ar.init]' lookup LamHaaMemInit [hah-ar.medi]' lookup LamHaaMemInit [meem-ar.medi]' lookup LamHaaMemInit;
    sub [behDotless-ar.init]' lookup BaaBaaMemInit [behDotless-ar.medi]' lookup BaaBaaMemInit [meem-ar.medi]' lookup BaaBaaMemInit;
    sub [behDotless-ar.init]' lookup BaaBaaHaaInit [behDotless-ar.medi]' lookup BaaBaaHaaInit [hah-ar.medi]' lookup BaaBaaHaaInit;
    sub [meem-ar.init]' lookup MemRaaIsol [reh-ar.fina]' lookup MemRaaIsol;
    sub [ain-ar.init]' [reh-ar.fina]' lookup MemRaaIsol;
    sub [hah-ar.init]' lookup HaaHaaInit [hah-ar.medi]' lookup HaaHaaInit;
    sub [kaf-ar.init lam-ar.init behDotless-ar.init]' lookup KafMemIsol [meem-ar.fina]' lookup KafMemIsol;
    sub [lam-ar.medi]' lookup LamQafFina [qafDotless-ar.fina]' lookup LamQafFina;
    sub [meem-ar.init meem-ar.init.MemHaaInit]' lookup MemHaaMemInit [hah-ar.medi hah-ar.medi.SadHaaInit]' lookup MemHaaMemInit [meem-ar.medi]' lookup KafMemInit;
    sub [behDotless-ar.init]' lookup BaaNonIsol [noonghunna-ar.fina]' lookup BaaNonIsol;
    sub [kaf-ar.medi]' lookup KafMemFina [meem-ar.fina]' lookup KafMemFina;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafLam [lam-ar.medi lam-ar.medi.LamAlfFina]' lookup KafLamAlf [alef-ar.fina alef-ar.fina.LamAlfFina];
    sub [kaf-ar.init kaf-ar.medi]' lookup KafLam [lam-ar.medi lam-ar.medi.LamAlfFina]' lookup KafLamAlf hamza-ar.float' [alef-ar.fina alef-ar.fina.LamAlfFina]; # see float hamza in quran.fea
    sub [behDotless-ar.init]' lookup BaaSenInit [seen-ar.medi]' lookup BaaSenInit;
    sub [behDotless-ar.init]' lookup BaaSenAltInit [seen-ar.fina]' lookup BaaSenInit;
    sub [kaf-ar.medi]' lookup KafRaaFina [reh-ar.fina]' lookup KafRaaFina;
    ignore sub [lam-ar.init]' [hehgoal-ar.medi];
    sub [lam-ar.init]' lookup LamHehInit [heh-ar.medi]' lookup LamHehInit;
    sub [behDotless-ar.init]' lookup BaaMemInit [meem-ar.medi]' lookup BaaMemInit;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafLam [lam-ar.medi lam-ar.fina alef-ar.fina kafDotless-ar.fina]' lookup KafLam;
    sub [kaf-ar.init]' lookup KafRaaIsol [reh-ar.fina]' lookup KafRaaIsol;
    sub [ain-ar.init]' lookup AynHaaInit [hah-ar.medi]' lookup AynHaaInit;
    sub [kaf-ar.medi ain-ar.medi]' lookup KafYaaFina [alefMaksura-ar.fina]' lookup KafYaaFina;
    #sub [lam-ar.medi]' lookup LamMemMedi [meem-ar.medi.dots]' lookup LamMemMedi;
    sub [seen-ar.init sad-ar.init]' lookup SenBaaMemInit [behDotless-ar.medi]' lookup SenBaaMemInit [meem-ar.medi]' lookup SenBaaMemInit;
    sub [behDotless-ar.init]' lookup BaaBaa [behDotless-ar.medi behDotless-ar.fina]' lookup BaaBaa;
    sub [hah-ar.init]' lookup HaaRaaIsol [reh-ar.fina]' lookup HaaRaaIsol;
    sub [lam-ar.init]' lookup LamRaaIsol [reh-ar.fina]' lookup LamRaaIsol;
    sub [behDotless-ar.init behDotless-ar.init.BaaHaaInit]' lookup BaaHaaMemInit [hah-ar.medi hah-ar.medi.SadHaaInit]' lookup BaaHaaMemInit [meem-ar.medi]' lookup KafMemInit;
    sub [ain-ar.init behDotless-ar.init hah-ar.init heh-ar.init meem-ar.init sad-ar.init seen-ar.init]' lookup AboveHaaIsol [hah-ar.fina]' lookup AboveHaaIsol;
    sub [fehDotless-ar.init lam-ar.init kaf-ar.init]' lookup AboveHaaIsol [hah-ar.medi hah-ar.fina]' lookup AboveHaaIsol2;
    sub [seen-ar.init sad-ar.init seen-ar.medi sad-ar.medi]' lookup SenYaaFina [alefMaksura-ar.fina reh-ar.fina]' lookup SenYaaFina;
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    sub [kaf-ar.init kaf-ar.medi]' heh-ar.medi by [kaf-ar.init.PreHeh kaf-ar.medi.PreHeh];
} rlig;

lookup ToothYaaBari {
    sub seen-ar.init by seen-ar.init.YaaBari;
    sub sad-ar.init by sad-ar.init.YaaBari;
    sub yehbarree-ar.fina by yehbarree-ar.fina.PostTooth;
} ToothYaaBari;

feature rlig {
    lookupflag IgnoreMarks;
    sub [seen-ar.init sad-ar.init]' lookup ToothYaaBari [yehbarree-ar.fina]' lookup ToothYaaBari;
} rlig;

lookup ToothYaaBariFina {
    sub behDotless-ar.medi by behDotless-ar.medi.YaaBari;
    sub behDotless-ar.init.BaaBaaIsol by behDotless-ar.init.BaaBaaYaaBari;
    sub behDotless-ar.medi.BaaBaaInit by behDotless-ar.medi.YaaBari;
   #sub hah-ar.init.DotBelow by hah-ar.init.BaaYaaBari;
    sub yehbarree-ar.fina by yehbarree-ar.fina.PostToothFina;
} ToothYaaBariFina;

feature rlig {
    lookupflag IgnoreMarks;
   #sub [hah-ar.init.DotBelow]' lookup ToothYaaBariFina [behDotless-ar.medi]' lookup ToothYaaBariFina [yehbarree-ar.fina]' lookup ToothYaaBariFina;
    sub [behDotless-ar.medi]' lookup ToothYaaBariFina [yehbarree-ar.fina]' lookup ToothYaaBariFina;
    sub [behDotless-ar.init.BaaBaaIsol]' lookup ToothYaaBariFina [behDotless-ar.medi.BaaBaaInit]' lookup ToothYaaBariFina [yehbarree-ar.fina]' lookup ToothYaaBariFina;
} rlig;

lookup AscenderYaaBari {
    sub behDotless-ar.init by behDotless-ar.init.YaaBari;
    sub fehDotless-ar.init by fehDotless-ar.init.YaaBari;
    sub lam-ar.init by lam-ar.init.YaaBari;
    sub kaf-ar.init by kaf-ar.init.YaaBari;
    sub yehbarree-ar.fina by yehbarree-ar.fina.PostAscender;
} AscenderYaaBari;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.init fehDotless-ar.init lam-ar.init kaf-ar.init]' lookup AscenderYaaBari [yehbarree-ar.fina]' lookup AscenderYaaBari;
} rlig;

lookup AynYaaBari {
    sub hah-ar.init by hah-ar.init.YaaBari;
    sub heh-ar.init by heh-ar.init.YaaBari;
    sub hehDoachashmee-ar.init by hehDoachashmee-ar.init.YaaBari;
    sub ain-ar.init by ain-ar.init.YaaBari;
    sub tah-ar.init by tah-ar.init.YaaBari;
    #sub meem-ar.init.dots by meem-ar.init.YaaBari;
    sub yehbarree-ar.fina by yehbarree-ar.fina.PostAyn;
} AynYaaBari;

feature rlig {
    lookupflag IgnoreMarks;
    sub [hah-ar.init heh-ar.init ain-ar.init tah-ar.init hehDoachashmee-ar.init]' lookup AynYaaBari yehbarree-ar.fina' lookup AynYaaBari;
} rlig;

# default Faa.init+Mem.medi ligature is too narrow leading to mark clash of
# both glyphs have marks above or both have marks bellow at the same time. So
# we use an alternate wider Meem in such cases.
# This covers فَمَا فَّمَا فَمَّا فَّمَّا فِّمَا فِمِا.
lookup FaaMemTatweel {
    sub meem-ar.medi by meem-ar.medi.KafMemMediTatweel;
} FaaMemTatweel;

feature rlig {
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.above' meem-ar.medi' lookup FaaMemTatweel @Tashkil.above';
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.above' @Tashkil.above' meem-ar.medi' lookup FaaMemTatweel @Tashkil.above';
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.above' @Tashkil.above' meem-ar.medi' lookup FaaMemTatweel @Tashkil.above' @Tashkil.above';
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.above' meem-ar.medi' lookup FaaMemTatweel @Tashkil.above' @Tashkil.above';
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.below' @Tashkil.above' meem-ar.medi' lookup FaaMemTatweel @Tashkil.above';
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.above' @Tashkil.below' meem-ar.medi' lookup FaaMemTatweel @Tashkil.above';
    sub fehDotless-ar.init' lookup KafMemInit @Tashkil.below' meem-ar.medi' lookup FaaMemTatweel @Tashkil.below';
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    sub [kaf-ar.init kaf-ar.medi ain-ar.init fehDotless-ar.init hah-ar.init heh-ar.init]' lookup KafMemInit [meem-ar.medi]' lookup KafMemInit;
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    sub [lam-ar.init]' lookup LamLamInit [@LamLamFoo lam-ar.medi kafDotless-ar.fina lam-ar.fina lam-ar.medi.LamAlfFina]' lookup LamLamInit;
    sub [lam-ar.medi]' lookup LamLamMedi2 [@LamLamFoo lam-ar.medi kafDotless-ar.fina lam-ar.fina lam-ar.medi.LamAlfFina]' lookup LamLamMedi;
} rlig;

lookup HehMediTooth {
    sub heh-ar.medi by heh-ar.medi.PostTooth;
    sub sad-ar.init by sad-ar.init.PreYaa;
    sub sad-ar.medi by sad-ar.medi.PreYaa;
    sub seen-ar.init by seen-ar.init.PreYaa;
    sub seen-ar.medi by seen-ar.medi.PreYaa;
} HehMediTooth;

feature rlig {
    lookupflag IgnoreMarks;
    sub [sad-ar.init sad-ar.medi seen-ar.init seen-ar.medi]' lookup HehMediTooth [heh-ar.medi]' lookup HehMediTooth;
} rlig;

# replace final alef followed by madda by a wider one
feature rlig {
    sub @Tashkil.above [alef-ar.fina]' [madda-ar maddalong-ar] by [alef-ar.fina.Wide];
} rlig;

# Wider alef wasl and alef with hamza above after faa
feature rlig {
    lookupflag IgnoreMarks;
    #sub fehDotless-ar.init [alefWasla-ar.fina alefHamzaabove-ar.fina]' by [alefWasla-ar.fina.Wide alefHamzaabove-ar.fina.Wide];
} rlig;

# If there are no marks, revert the above substitution
feature rlig {
    #sub fehDotless-ar.init [alefWasla-ar.fina.Wide alefHamzaabove-ar.fina.Wide]' by [alefWasla-ar.fina alefHamzaabove-ar.fina];
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    sub [ain-ar.init hah-ar.init hah-ar.medi]' [alef-ar.fina dal-ar.fina heh-ar.fina lam-ar.fina lam-ar.medi lam-ar.medi.LamMemFina lam-ar.medi.LamWawFina lam-ar.medi.LamHeh lam-ar.medi.LamYaaFina kafDotless-ar.fina lam-ar.medi.LamQafFina behDotless-ar.medi.BaaRaaFina lam-ar.medi.LamAlfFina lam-ar.medi.LamMemMedi lam-ar.medi.LamLamMedi behDotless-ar.medi.BaaNonFina behDotless-ar.medi.High kaf-ar.medi kaf-ar.medi.KafMemAlf kaf-ar.medi.KafMemMedi kaf-ar.medi.KafMemFina kaf-ar.medi.KafLam kaf-ar.medi.KafHeh kaf-ar.medi.KafBaaMedi kaf-ar.medi.KafRaaFina kaf-ar.medi.KafYaaFina kaf-ar.medi.PreHeh] by [ain-ar.init.Finjani hah-ar.init.Finjani hah-ar.medi.Finjani];
} rlig;

lookup BaaYaaFina {
    sub behDotless-ar.medi by behDotless-ar.medi.BaaYaaFina;
    sub alefMaksura-ar.fina by alefMaksura-ar.fina.BaaYaaFina;
} BaaYaaFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [behDotless-ar.medi]' lookup BaaYaaFina [alefMaksura-ar.fina]' lookup BaaYaaFina;
} rlig;

lookup ToothMem {
    sub meem-ar.fina by meem-ar.fina.PostTooth;
    sub sad-ar.init by sad-ar.init.PreYaa;
    sub sad-ar.medi by sad-ar.medi.PreYaa;
    sub seen-ar.init by seen-ar.init.PreYaa;
    sub seen-ar.medi by seen-ar.medi.PreYaa;
} ToothMem;

feature rlig {
    lookupflag IgnoreMarks;
    sub [seen-ar.init seen-ar.medi sad-ar.init sad-ar.medi]' lookup ToothMem [meem-ar.fina]' lookup ToothMem;
} rlig;

lookup KafLamYaa {
    sub lam-ar.medi.KafLam by lam-ar.medi.KafLamYaa;
} KafLamYaa;

feature rlig {
    lookupflag IgnoreMarks;
    sub [lam-ar.medi.KafLam]' lookup KafLamYaa [alefMaksura-ar.fina]' lookup LamYaaFina;
} rlig;

@LamKafInit = [lam-ar.init lam-ar.medi lam-ar.medi.KafLam lam-ar.medi.KafMemLam lam-ar.medi.LamLamInit];
lookup LamKafInit {
    sub @LamKafInit by @LamKafInit kashida-ar.1;
    sub meem-ar.medi.LamMemInit by meem-ar.medi.LamMemInitTatweel;
} LamKafInit;

feature rlig {
    lookupflag IgnoreMarks;
    sub [@LamKafInit meem-ar.medi.LamMemInit]' lookup LamKafInit [kaf-ar.medi kaf-ar.medi.KafHeh kaf-ar.medi.KafMemFina kaf-ar.medi.KafRaaFina kaf-ar.medi.KafYaaFina kaf-ar.medi.KafMemAlf kaf-ar.medi.PreHeh keheh-ar.fina];
} rlig;

lookup HehYaaFina {
    sub heh-ar.medi.BaaHehMedi by heh-ar.medi.HehYaaFina;
    sub heh-ar.medi.PostTooth by heh-ar.medi.PostToothHehYaa;
} HehYaaFina;

feature rlig {
    lookupflag IgnoreMarks;
    sub [heh-ar.medi.PostTooth heh-ar.medi.BaaHehMedi]' lookup HehYaaFina [alefMaksura-ar.fina]' lookup BaaYaaFina;
} rlig;

feature rlig {
    lookupflag IgnoreMarks;
    #sub @RaaWaw [alefHamzabelow-ar alefWavyhamzabelow-ar]' by alef-ar.isol.LowHamza;
} rlig;

# insert tatweel between ح and ك in فحك[ملير]
lookup FaaHaaKaf {
    sub hah-ar.medi.FaaHaaInit by hah-ar.medi.FaaHaaInit kashida-ar.1;
} FaaHaaKaf;

feature rlig {
    lookupflag IgnoreMarks;
    sub fehDotless-ar.init.FaaHaaInit hah-ar.medi.FaaHaaInit' lookup FaaHaaKaf [kaf-ar.medi.KafHeh kaf-ar.medi.KafMemFina kaf-ar.medi.KafRaaFina kaf-ar.medi.KafYaaFina kaf-ar.medi.PreHeh];
} rlig;

# insert tatweel between ح and ت in [بمسصف]حت[رن]
lookup AboveHaaTatweel {
    sub hah-ar.medi.FaaHaaInit by hah-ar.medi.FaaHaaInit kashida-ar.05;
    sub hah-ar.medi.SadHaaInit by hah-ar.medi.SadHaaInit kashida-ar.05;
} AboveHaaTatweel;

feature rlig {
    lookupflag IgnoreMarks;
    sub [hah-ar.medi.FaaHaaInit hah-ar.medi.SadHaaInit]' lookup AboveHaaTatweel [behDotless-ar.medi.BaaNonFina behDotless-ar.medi.BaaRaaFina];
} rlig;

# When an initial Baa is followed by Alef, the dot clashes with the Hamza below
# Alef, Also the marks above the Baa clash with the Alef, so we replace the Baa
# with a wider variant.
feature rlig {
    lookupflag IgnoreMarks;
    sub behDotless-ar.init' lookup BaaInitWide alef-ar.fina;
} rlig;

# If the Alef has no Hamza below, or there is no marks above the Baa, revert to
# the original, non-wide form (notice there is no IgnoreMarks flag).
feature rlig {
    sub [behDotless-ar.init.Wide]' [alef-ar.fina] by [behDotless-ar.init];
} rlig;

feature rlig {
    script arab;
    language ARA;
    lookupflag IgnoreMarks;
    # Replace teh init following teh/theh medi by a teh init with two vertical
    # dots.
    #sub teh-ar.init.BaaBaaIsol' [teh-ar.medi.BaaBaaInit theh-ar.medi.BaaBaaInit] by tteheh-ar.init.BaaBaaIsol;
    #sub teh-ar.init.High' [teh-ar.medi.High theh-ar.medi.High] by tteheh-ar.init.High;
    # Ditto for يبين and co.
    #sub [beh-ar.medi.BaaBaaInit yeh-ar.medi.BaaBaaInit] [yeh-ar.medi.BaaNonFina yeh-ar.medi.BaaRaaFina]' by [e-ar.medi.BaaNonFina e-ar.medi.BaaRaaFina];
} rlig;

# Insert kashida between final ع and the kasra below the preceding letter
# see https://github.com/aliftype/quran-data/issues/4
lookup KasraAynFina {
    sub kasratan-ar by kasratan-ar kashida-ar.2;
    sub kasra-ar by kasra-ar kashida-ar.2;
    sub openkasratan-ar by openkasratan-ar kashida-ar.2;
    sub meembelow-ar by meembelow-ar kashida-ar.3;
} KasraAynFina;

# and final ح
# see https://github.com/aliftype/amiri/issues/162#issuecomment-421769913
lookup KasraHaaFina {
    sub kasratan-ar by kasratan-ar kashida-ar.1;
    sub kasra-ar by kasra-ar kashida-ar.1;
    sub openkasratan-ar by openkasratan-ar kashida-ar.1;
    sub meembelow-ar by meembelow-ar kashida-ar.2;
} KasraHaaFina;

feature rlig {
    sub @Tashkil.below' lookup KasraAynFina ain-ar.fina;
    sub @Tashkil.below' lookup KasraHaaFina hah-ar.fina;
} rlig;
";
name = contextuals;
},
{
code = "# Replace baa glyphs with dot below following a raa or waw by an alternate ones
# with low dots.
feature ss01 {
    featureNames {
        name 3 1 0x0409 \"Low Baa dot following a Raa or Waw\";
        name 3 1 0x0C01 \"خفض نقطة الباء المسبوقة براء أو واو\";
    };

    lookupflag IgnoreMarks;
    #sub @RaaWaw @aBaaDotBelow' by @aBaaLowDotBelow;
} ss01;

#
lookup MemAlfFina {
    sub alef-ar.fina by alef-ar.fina.MemAlfFina;
    sub meem-ar.medi by meem-ar.medi.MemAlfFina;
    sub sad-ar.medi by sad-ar.medi.PreYaa;
    sub seen-ar.medi by seen-ar.medi.PreYaa;
    sub behDotless-ar.init.BaaSenInit by behDotless-ar.init.BaaSenAltInit;
    sub seen-ar.medi.BaaSenInit by seen-ar.medi.BaaSenAltInit;
} MemAlfFina;

lookup MemAlfFinaPostTooth {
    sub meem-ar.medi by meem-ar.medi.AlfPostTooth;
} MemAlfFinaPostTooth;

lookup BaaMemAlfFina {
    sub behDotless-ar.medi by behDotless-ar.medi.BaaMemAlfFina;
    sub meem-ar.medi by meem-ar.medi.BaaMemAlfFina;
} BaaMemAlfFina;

@NoMemAlfFina = [
  meem-ar.medi meem-ar.medi.LamBaaMemInit meem-ar.medi.LamMemInit
  meem-ar.medi.LamHaaMemInit meem-ar.medi.BaaMemInit meem-ar.medi.LamMemMedi
  meem-ar.medi.SenBaaMemInit meem-ar.medi.BaaBaaMemInit
  meem-ar.medi.LamMemInitTatweel meem-ar.medi.KafMemMedi meem-ar.medi.SenMemInit
  heh-ar.medi.BaaHehMedi heh-ar.medi.PostTooth
];

feature ss02 {
    featureNames {
        name 3 1 0x0409 \"Alternate medial Meem and final Alef combination\";
        name 3 1 0x0C01 \"شكل بديل للميم المتوسطة مع الألف المنتهية\";
    };

    lookupflag IgnoreMarks;
    ignore sub @NoMemAlfFina meem-ar.medi' alef-ar.fina';
    sub behDotless-ar.medi' lookup BaaMemAlfFina meem-ar.medi' lookup BaaMemAlfFina alef-ar.fina' lookup MemAlfFina;
    sub [sad-ar.medi seen-ar.medi]' lookup MemAlfFina meem-ar.medi' lookup MemAlfFinaPostTooth alef-ar.fina' lookup MemAlfFina;
    sub behDotless-ar.init.BaaSenInit' lookup MemAlfFina seen-ar.medi.BaaSenInit' lookup MemAlfFina meem-ar.medi' lookup MemAlfFinaPostTooth alef-ar.fina' lookup MemAlfFina;
    sub meem-ar.medi' lookup MemAlfFina alef-ar.fina' lookup MemAlfFina;
} ss02;

feature ss03 {
    featureNames {
        name 3 1 0x0409 \"Localised @ and & symbols\";
        name 3 1 0x0C01 \"شكل عربي لعلامتي @ و &\";
    };

    #sub at by at.ara;
    #sub ampersand by ampersand.ara;
} ss03;

# alternate Gaf form
feature ss04 {
    featureNames {
        name 3 1 0x0409 \"Alternate, more naskh-like, Gaf form\";
        name 3 1 0x0C01 \"شكل بديل –نسخي– للگاف\";
    };

    sub keheh-ar by keheh-ar.alt;
    sub keheh-ar.fina by keheh-ar.alt.fina;
} ss04;

lookup dummy {
    sub kashida-ar.1 by kashida-ar;
} dummy;

feature ss04 {
    sub lam-ar.init' lookup LamLamInit [kashida-ar.1]' lookup dummy keheh-ar.alt.fina' lookup LamLamInit;
    sub lam-ar.medi' lookup LamLamMedi2 [kashida-ar.1]' lookup dummy keheh-ar.alt.fina' lookup LamLamMedi;
    sub [kaf-ar.init kaf-ar.medi]' lookup KafLam keheh-ar.alt.fina' lookup KafLam;
} ss04;

lookup SSShaddaKasra {
    sub kasratan-ar by kasratan-ar.small;
    sub kasra-ar by kasra-ar.small;
} SSShaddaKasra;

feature ss05 {
    featureNames {
        name 3 1 0x0409 \"Kasra is placed below Shadda instead of base glyph\";
        name 3 1 0x0C01 \"وضع الكسرة تحت الشدة بدلا من تحت الحرف\";
    };

    sub shadda-ar [kasratan-ar kasra-ar]' lookup SSShaddaKasra;
} ss05;

# ss06 is used in lellah.fea
# ss07 is used in kashida.fea
# ss08 is used in local.fea
";
name = stylisticsets;
},
{
code = "lookup YaaBari3Kern {
    pos ain-ar.init <0 0 215 0>;
    pos fehDotless-ar.init <0 0 347 0>;
    pos heh-ar.init <0 0 195 0>;
    pos lam-ar.init <0 0 466 0>;
    pos meem-ar.init <0 0 254 0>;
    pos seen-ar.init <0 0 73 0>;
    pos tah-ar.init <0 0 73 0>;
    pos hehDoachashmee-ar.init <0 0 195 0>;
} YaaBari3Kern;
";
name = kerning;
}
);
features = (
{
code = "lookup crown {
	lookupflag UseMarkFilteringSet [crown-ar.alt];
	pos [alef-ar]' crown-ar.alt <100 0 100 0>;
} crown;

@Dal_1 = [dal-ar.fina dal-ar.fina.BaaDal dal-ar.fina.KafDal dal-ar.fina.LamDal dal-ar];
@side1_4 = [heh-ar heh-ar.fina heh-ar.fina.KafHeh heh-ar.fina.LamHeh];
# final alef with no hamza above
@Alf_1 = [alef-ar.fina.LamAlfFina]; #alefHamzabelow-ar.fina.LamAlfFina];
@Alf_2 = [alef-ar.fina alef-ar.fina.KafAlf alef-ar.fina.KafMemAlf alef-ar.fina.LamAlfFina alef-ar.fina.LamAlfIsol alef-ar.fina.MemAlfFina];
@Kaf_1 = [kaf-ar.init.KafHeh kaf-ar.init.KafMemIsol];
@Kaf_2 = [kaf-ar.init.KafBaaInit kaf-ar.init.KafMemAlf];
@Kaf_3 = [kaf-ar.init kaf-ar.init.KafLam kaf-ar.init.PreHeh keheh-ar];
@Kaf_4 = [kaf-ar.init.KafYaaIsol];
@Kaf_5 = [kaf-ar.init.KafMemInit kaf-ar.init.KafRaaIsol];
@Raa_1 = [@RaaWaw dal-ar.fina dal-ar dal-ar.fina.BaaDal dal-ar.fina.KafDal dal-ar.fina.LamDal];
@Raa_2 = [reh-ar.fina.MemRaaIsol];
@side2_3 = [seen-ar.init.SenHaaInit sad-ar.init.SadHaaInit lam-ar.init.LamHaaHaaInit];
@side2_4 = [sad-ar.init.AboveHaa seen-ar.init.AboveHaa heh-ar.init.AboveHaa hah-ar.init.AboveHaa meem-ar.init.AboveHaa kaf-ar.init.AboveHaa ain-ar.init.AboveHaa];
#@Teh_m = [tehMarbuta-ar.fina.LamHeh tehMarbuta-ar.fina.KafHeh tehMarbutagoal-ar.fina.LamHeh tehMarbutagoal-ar.fina.KafHeh];

# teh marbuta
lookup kern_1 {
	lookupflag 0;
    # we don't want to kern those if there is tashkil as it touches the kaf
    pos @RaaWaw @Kaf_1 <-293 0 -293 0>;
    pos @RaaWaw @Kaf_4 <-146 0 -146 0>;
    pos @Dal_1 @Kaf_1 <-293 0 -293 0>;
    pos @Dal_1 @Kaf_4 <-195 0 -195 0>;
} kern_1;

lookup kern_2 {
    lookupflag IgnoreMarks;
    pos @RaaWaw @Kaf_5 <-293 0 -293 0>;
    pos @RaaWaw [@Kaf_2 @Kaf_3] <-146 0 -146 0>;
    pos @RaaWaw @side2_3 <-49 0 -49 0>;
    #pos @RaaWaw @aYaa.init <39 0 39 0>;
    pos @RaaWaw semicolon-ar <59 0 59 0>;
    # Arabic semicolon
    pos @Dal_1 @Kaf_5 <-293 0 -293 0>;
    pos @Dal_1 [@Kaf_2 @Kaf_3] <-195 0 -195 0>;
    #pos @Raa_2 [@Kaf_2 @Kaf_3 @Kaf_4] <-195 0 -195 0>;
    #pos @Raa_2 [@Kaf_1 @Kaf_5] <-391 0 -391 0>;
    pos @Raa_2 @side2_3 <-98 0 -98 0>;
    pos @Raa_2 @side2_4 <-195 0 -195 0>;
    #pos @Raa_2 @aBaaDotBelow <88 0 88 0>;
    # the dots of teh marbuta are very close to exclamation mark
    #pos @Teh_m exclam <73 0 73 0>;
} kern_2;

lookup kern_3 {
    lookupflag IgnoreMarks;
    # +ve kern so that the tail of raa/waw does not touch the dot of baa
    #pos [@RaaWaw @AlefHamzaBelow] @aBaaDotBelow <83 0 83 0>;
} kern_3;

lookup kern_4 {
    # increase advance width for first glyph in 3-letter Baree Yaa ligatures
    pos [ain-ar.init fehDotless-ar.init heh-ar.init lam-ar.init meem-ar.init seen-ar.init tah-ar.init hehDoachashmee-ar.init]' lookup YaaBari3Kern behDotless-ar.medi.YaaBari;
} kern_4;

# we don't want to ignore marks here
lookup kern_5 {
	lookupflag 0;
    pos @Alf_1 [@Kaf_1 @Kaf_5] <-244 0 -244 0>;
    pos @Alf_1 @Kaf_2 <-98 0 -98 0>;
    pos @Alf_1 @Kaf_3 <-122 0 -122 0>;
    pos @Alf_1 @Kaf_4 <-146 0 -146 0>;
} kern_5;

lookup kern_6 {
	lookupflag 0;
    # raa/waw/dal followed by isolated dagger alef followed by madda needs some
    # space to avoid fatha/madda clash
    pos @Raa_1' <98 0 98 0> fatha-ar alefabove-ar [madda-ar maddalong-ar];
    pos [hamza-ar]' <98 0 98 0> fatha-ar alefabove-ar;
} kern_6;

lookup kern_7 {
    lookupflag IgnoreMarks;
    # kern heh isol/final followed by kaf, does not happen in Arabic but can be
    # seen in Kurdish or Persian using ZWNJ between them.
    pos @side1_4 zerowidthnonjoiner [@Kaf_1 @Kaf_2 @Kaf_3 @Kaf_4 @Kaf_5]' -244;
    # Uniscribe replace ZWNJ with space
    pos @side1_4 space [@Kaf_1 @Kaf_2 @Kaf_3 @Kaf_4 @Kaf_5]' -244;
    # some applications might just remove it
    pos @side1_4 [@Kaf_1 @Kaf_2 @Kaf_3 @Kaf_4 @Kaf_5]' -244;
} kern_7;

lookup kern_8 {
    lookupflag IgnoreMarks;
    #pos period [quotedblleft quoteleft] <-146 0 -146 0>;
    #pos period.latn [quotedblright quoteright] -73;
} kern_8;

# proportional digits
lookup kern_9 {
	lookupflag 0;
    pos one-ar.prop two-ar.prop -49;
    pos one-ar.prop three-ar.prop -49;
    pos one-ar.prop six-ar.prop -98;
    pos one-ar.prop nine-ar.prop -49;
    pos two-ar.prop seven-ar.prop 49;
    pos two-ar.prop eight-ar.prop -24;
    pos three-ar.prop seven-ar.prop 49;
    pos four-ar.prop one-ar.prop -24;
    pos four-ar.prop eight-ar.prop 24;
    pos six-ar.prop one-ar.prop -24;
    pos seven-ar.prop one-ar.prop -24;
    pos seven-ar.prop eight-ar.prop -24;
    pos eight-ar.prop one-ar.prop -49;
    pos eight-ar.prop two-ar.prop -49;
    pos eight-ar.prop three-ar.prop -49;
    pos eight-ar.prop six-ar.prop -49;
    pos eight-ar.prop seven-ar.prop -49;
    pos nine-ar.prop eight-ar.prop 24;
    pos nine-ar.prop zero-ar.prop 24;
    pos zero-ar.prop seven-ar.prop 24;
    pos zero-ar.prop eight-ar.prop 24;
} kern_9;
";
tag = kern;
},
{
code = "# Automatic Code
";
tag = curs;
},
{
code = "# Automatic Code";
tag = kern;
},
{
code = "# Automatic Code";
tag = mark;
},
{
code = "# Automatic Code";
tag = mkmk;
},
{
code = "# With ss05 on, kasra is below shadda, so move the shadda up a bit to
# compensate for the kasra.
pos shadda-ar [kasra-ar.small] <0 103 0 0>;
pos shadda-ar [kasratan-ar.small] <0 171 0 0>;
";
labels = (
{
language = dflt;
value = "";
}
);
tag = ss05;
}
);
fontMaster = (
{
axesValues = (
400
);
customParameters = (
{
name = postscriptFullName;
value = Amiri;
},
{
name = postscriptFontName;
value = "Amiri-Regular";
},
{
name = postscriptWeightName;
value = Regular;
}
);
guides = (
{
locked = 1;
name = Crown;
pos = (0,1086);
}
);
id = "7FE84AD5-D318-40C5-A81A-3CDC73FF77D2";
metricValues = (
{
pos = 1124;
},
{
pos = 646;
},
{
pos = 433;
},
{
},
{
pos = -634;
},
{
}
);
name = Regular;
visible = 1;
},
{
axesValues = (
700
);
customParameters = (
{
name = postscriptFullName;
value = "Amiri Bold";
},
{
name = postscriptFontName;
value = "Amiri-Bold";
},
{
name = postscriptWeightName;
value = Bold;
},
{
name = weightClass;
value = 700;
}
);
guides = (
{
locked = 1;
name = Crown;
pos = (0,1101);
}
);
iconName = SemiBold;
id = "037FF2D3-C03F-44B0-90AB-89AFD43EFA27";
metricValues = (
{
pos = 1124;
},
{
pos = 646;
},
{
pos = 433;
},
{
},
{
pos = -634;
},
{
}
);
name = Bold;
userData = {
GSOffsetHorizontal = 15;
GSOffsetKeepCompatible = 1;
GSOffsetVertical = 0;
};
}
);
instances = (
{
axesValues = (
400
);
instanceInterpolations = {
"7FE84AD5-D318-40C5-A81A-3CDC73FF77D2" = 1;
};
name = Regular;
},
{
axesValues = (
700
);
customParameters = (
{
name = "Remove Glyphs";
value = (
"u1EE*"
);
}
);
instanceInterpolations = {
"037FF2D3-C03F-44B0-90AB-89AFD43EFA27" = 1;
};
isBold = 1;
linkStyle = Regular;
name = Bold;
weightClass = 700;
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = dflt;
value = "Copyright 2010-2024 The Amiri Project Authors (https://github.com/aliftype/amiri-next).";
}
);
},
{
key = descriptions;
values = (
{
language = dflt;
value = "Amiri is a classical Arabic typeface in Naskh style for typesetting books and other running text. Its design is a revival of the beautiful typeface pioneered in early 20th century by Bulaq Press in Cairo, also known as Amiria Press, after which the font is named.";
}
);
},
{
key = designers;
values = (
{
language = dflt;
value = "Khaled Hosny";
}
);
},
{
key = designerURL;
value = "http://www.amirifont.org";
},
{
key = licenses;
values = (
{
language = dflt;
value = "This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>";
}
);
},
{
key = licenseURL;
value = "https://www.gnu.org/licenses/agpl-3.0.html";
},
{
key = manufacturerURL;
value = "http://www.amirifont.org";
},
{
key = sampleTexts;
values = (
{
language = dflt;
value = "صِفْ خَلْقَ خَوْدٍ كَمِثْلِ ٱلشَّمْسِ إِذْ بَزَغَتْ يَحْظَىٰ ٱلضَّجِيعُ بِهَا نَجْلَاءَ مِعْطَارِ.";
}
);
},
{
key = vendorID;
value = ALIF;
}
);
unitsPerEm = 1000;
versionMajor = 0;
versionMinor = 0;
}
