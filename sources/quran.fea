#
# Small letters
#
# In Quranic orthography, there are two forms of dagger alef; a superscript one
# that is a combining mark and a spacing one that is regular alef letter, the
# later is represented in Unicode by using NBSP (for isolated) or Kashida (for
# medial) before the combining mark.
#
# Other small letters have an encoded isolated form and only need medial form
# with kashida.
# Substitute combining small letters by the spacing ones.
feature ccmp {
    sub [nbspace narrownbspace] alefabove-ar by alefabove-ar.isol;
    sub kashida-ar alefabove-ar by alefabove-ar.medi;
    sub kashida-ar yehabove-ar by yehabove-ar.medi;
    sub kashida-ar highwaw-ar by highwaw-ar.medi;
    sub kashida-ar hamzaabove-ar by hamza-ar.medi;
} ccmp;

#
# Medial hamza
#
# Hamza should be shaping transparent, just like combining marks, while still
# not a combining marks, I call t medial hamza because it "floats" between
# adjacent letters. When a hamza comes between two letters that would normally
# join, it will be placed between them over a connecting stroke, else it will
# just set on the baseline.
#
# This is not recognized by Unicode, so we have to hack our way in the font to
# override shaping decisions by OpenType engine.
#
# Since the layout engine considers hamza non-joiner, it will break joining
# around it, so we simply override this by replacing glyphs around the hamza
# with the forms that they would normally take if it was not there, and replace
# the hamza wit its medial glyph that has a connecting stroke.
@before.isol = [yehHamzaabove-ar beh-ar teh-ar theh-ar jeem-ar hah-ar khah-ar seen-ar sheen-ar sad-ar dad-ar tah-ar zah-ar ain-ar ghain-ar feh-ar qaf-ar kaf-ar lam-ar meem-ar noon-ar heh-ar alefMaksura-ar yeh-ar yehFarsi-ar];
@before.init = [yehHamzaabove-ar.init beh-ar.init teh-ar.init theh-ar.init jeem-ar.init hah-ar.init khah-ar.init seen-ar.init sheen-ar.init sad-ar.init dad-ar.init tah-ar.init zah-ar.init ain-ar.init ghain-ar.init feh-ar.init qaf-ar.init kaf-ar.init lam-ar.init meem-ar.init noon-ar.init heh-ar.init alefMaksura-ar.init yeh-ar.init yehFarsi-ar.init];
@before.medi = [yehHamzaabove-ar.medi beh-ar.medi teh-ar.medi theh-ar.medi jeem-ar.medi hah-ar.medi khah-ar.medi seen-ar.medi sheen-ar.medi sad-ar.medi dad-ar.medi tah-ar.medi zah-ar.medi ain-ar.medi ghain-ar.medi feh-ar.medi qaf-ar.medi kaf-ar.medi lam-ar.medi meem-ar.medi noon-ar.medi heh-ar.medi alefMaksura-ar.medi yeh-ar.medi yehFarsi-ar.medi];
@before.fina = [yehHamzaabove-ar.fina beh-ar.fina teh-ar.fina theh-ar.fina jeem-ar.fina hah-ar.fina khah-ar.fina seen-ar.fina sheen-ar.fina sad-ar.fina dad-ar.fina tah-ar.fina zah-ar.fina ain-ar.fina ghain-ar.fina feh-ar.fina qaf-ar.fina kaf-ar.fina lam-ar.fina meem-ar.fina noon-ar.fina heh-ar.fina alefMaksura-ar.fina yeh-ar.fina yehFarsi-ar.fina];
@after.isol = [alefMadda-ar alefHamzaabove-ar wawHamzaabove-ar alefHamzabelow-ar alef-ar tehMarbuta-ar dal-ar thal-ar reh-ar zain-ar waw-ar];
@after.fina = [alefMadda-ar.fina alefHamzaabove-ar.fina wawHamzaabove-ar.fina alefHamzabelow-ar.fina alef-ar.fina tehMarbuta-ar.fina dal-ar.fina thal-ar.fina reh-ar.fina zain-ar.fina waw-ar.fina];
@before = [@aKashida alefabove-ar.medi yehabove-ar.medi highwaw-ar.medi @before.isol @before.fina];
@after = [@aKashida alefabove-ar.medi yehabove-ar.medi highwaw-ar.medi alef-ar.fina.Tatweel @after.isol @before.isol @before.init];
lookup Before {
    sub @before.isol by @before.init;
    sub @before.fina by @before.medi;
} Before;

lookup After {
    sub @before.isol by @before.fina;
    sub @after.isol by @after.fina;
    sub @before.init by @before.medi;
} After;

lookup MedialHamza {
    sub hamza-ar by hamza-ar.medi;
} MedialHamza;

lookup FloatingHamza {
    sub hamza-ar by hamza-ar.float;
    sub hamza-ar.medi by hamza-ar.float;
} FloatingHamza;

lookup LamAlefIsol {
    sub lam-ar by lam-ar.init.LamAlfIsol;
    sub alef-ar by alef-ar.fina.LamAlfIsol;
} LamAlefIsol;

lookup LamAlefFina {
    sub lam-ar.fina by lam-ar.medi.LamAlfFina;
    sub alef-ar by alef-ar.fina.LamAlfFina;
} LamAlefFina;

feature rlig {
    lookupflag IgnoreMarks;
    # hamza between lam and alef needs special treatment as it should not have
    # a connecting stroke to avoid breaking lam-alef.
    sub lam-ar' lookup LamAlefIsol hamza-ar' lookup FloatingHamza alef-ar' lookup LamAlefIsol;
    sub lam-ar.fina' lookup LamAlefFina hamza-ar' lookup FloatingHamza alef-ar' lookup LamAlefFina;
    # Medial hamza.
    sub @before' lookup Before hamza-ar' lookup MedialHamza @after' lookup After;
} rlig;

# This is the Unicode-sanctioned way of lam-alef with medial hamza.
feature ccmp {
    lookupflag IgnoreMarks;
    sub lam-ar hamza-ar.medi' lookup FloatingHamza alef-ar;
} ccmp;

# kern medial hamza between final lam-alef to avoid glyph overlap
feature kern {
    lookupflag IgnoreMarks;
    pos hamza-ar.float @aAlf.fina.LamAlfFina <-146 0 0 0>;
} kern;

# small waw after isolated/final heh is lower than usual, so we use an
# alternate glyph for that
feature rlig {
    lookupflag IgnoreMarks;
    sub [@aHeh.isol @aHeh.fina] [wawSmall-ar]' by [wawSmall-ar.low];
} rlig;

# some glyphs need more room to accommodate madda mark, so we change the advance
# width on fly.
feature mark {
    # small waw
    pos [wawSmall-ar.low] [maddalong-ar] <24 0 122 0>;
    # alef
    pos [alef-ar.fina alef-ar.fina.Wide alef-ar.fina.KafMemAlf alef-ar.fina.MemAlfFina] [maddalong-ar] <122 0 122 0>;
    pos [alef-ar.fina alef-ar.fina.Wide alef-ar.fina.KafMemAlf alef-ar.fina.MemAlfFina] [madda-ar] <171 0 171 0>;
    pos [alef-ar] [maddalong-ar] <73 0 146 0>;
} mark;
